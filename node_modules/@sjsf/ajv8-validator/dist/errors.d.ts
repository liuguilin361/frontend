import { type Config, type IdOptions, type UiSchemaRoot, type ValidationError } from "@sjsf/form";
import { type AsyncValidateFunction, type ErrorObject, type ValidateFunction } from "ajv";
export interface ErrorsTransformerOptions extends IdOptions {
    uiSchema?: UiSchemaRoot;
}
export declare function createFormErrorsTransformer(options: ErrorsTransformerOptions): (errors: ErrorObject[]) => {
    instanceId: import("@sjsf/form").Id;
    propertyTitle: any;
    message: string;
    error: ErrorObject<string, Record<string, any>, unknown>;
}[];
export declare function createFieldErrorsTransformer(config: Config): (errors: ErrorObject[]) => {
    instanceId: import("@sjsf/form").Id;
    propertyTitle: string;
    message: string;
    error: ErrorObject<string, Record<string, any>, unknown>;
}[];
export type TransformErrors = (errors: ErrorObject[]) => ValidationError<ErrorObject>[];
export declare function validateAndTransformErrors(validate: ValidateFunction, data: any, transformErrors: TransformErrors): ValidationError<ErrorObject<string, Record<string, any>, unknown>>[];
export declare function validateAndTransformErrorsAsync(validate: AsyncValidateFunction, data: any, transformErrors: TransformErrors): Promise<ValidationError<ErrorObject<string, Record<string, any>, unknown>>[]>;
