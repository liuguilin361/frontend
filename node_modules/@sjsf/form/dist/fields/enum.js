import { getSchemaConstantValue, } from "../core/index.js";
import { retrieveUiSchema, createPseudoId, } from "../form/index.js";
function getAltSchemas(schema, uiSchema) {
    return schema.anyOf
        ? [schema.anyOf, uiSchema.anyOf]
        : [schema.oneOf, uiSchema.oneOf];
}
export function createOptions(ctx, config, uiOption, schema) {
    const enumValues = schema.enum;
    const disabledValues = new Set(uiOption('disabledEnumValues'));
    if (enumValues) {
        const enumNames = uiOption('enumNames');
        return enumValues.map((value, index) => {
            const label = enumNames?.[index] ?? String(value);
            return {
                id: createPseudoId(config.id, index, ctx),
                label,
                value,
                disabled: disabledValues.has(value),
            };
        });
    }
    const [altSchemas, altUiSchemas] = getAltSchemas(schema, config.uiSchema);
    return (altSchemas &&
        altSchemas.map((altSchemaDef, index) => {
            if (typeof altSchemaDef === "boolean") {
                throw new Error(`Invalid enum definition in anyOf ${index}`);
            }
            const value = getSchemaConstantValue(altSchemaDef);
            const label = retrieveUiSchema(ctx, altUiSchemas?.[index])["ui:options"]?.title ??
                altSchemaDef.title ??
                String(value);
            return {
                id: createPseudoId(config.id, index, ctx),
                schema: altSchemaDef,
                label,
                value,
                disabled: disabledValues.has(value),
            };
        }));
}
