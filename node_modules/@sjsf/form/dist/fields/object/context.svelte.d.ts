import { type SchemaObjectValue } from "../../core/index.js";
import { type Config, type FormInternalContext, type Validator, type FieldError, type PossibleError, type Translate } from "../../form/index.js";
export type ObjectContext<V extends Validator> = {
    readonly errors: FieldError<PossibleError<V>>[];
    readonly canExpand: boolean;
    readonly propertiesOrder: string[];
    addProperty(): void;
    renameProperty(oldProp: string, newProp: string, config: Config): void;
    removeProperty(prop: string): void;
    isAdditionalProperty(property: string): boolean;
    propertyConfig(config: Config, property: string, isAdditional: boolean): Config;
};
export declare function getObjectContext<V extends Validator>(): ObjectContext<V>;
export declare function setObjectContext<V extends Validator>(ctx: ObjectContext<V>): void;
export declare function createObjectContext<V extends Validator>(ctx: FormInternalContext<V>, config: () => Config, value: () => SchemaObjectValue | undefined, setValue: (v: SchemaObjectValue) => void, translate: Translate): ObjectContext<V>;
