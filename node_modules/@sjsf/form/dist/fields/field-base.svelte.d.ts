import { type ComponentProps, type Config, type FieldValue, type UiOption } from "../form/index.js";
import type { FoundationalWidgetType } from "./widgets.js";
declare class __sveltets_Render<V extends FieldValue, T extends FoundationalWidgetType> {
    props(): {
        config: Config;
        uiOption: UiOption;
        value: V;
        widgetType: T;
        fromValue: (v: V) => ComponentProps[T]["value"];
        toValue: (v: ComponentProps[T]["value"]) => V;
        showTitle: boolean;
        useLabel: boolean;
    };
    events(): {};
    slots(): {};
    bindings(): "value";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <V extends FieldValue, T extends FoundationalWidgetType>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<V, T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<V, T>['props']>, ReturnType<__sveltets_Render<V, T>['events']>, ReturnType<__sveltets_Render<V, T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<V, T>['bindings']>;
    } & ReturnType<__sveltets_Render<V, T>['exports']>;
    <V extends FieldValue, T extends FoundationalWidgetType>(internal: unknown, props: ReturnType<__sveltets_Render<V, T>['props']> & {}): ReturnType<__sveltets_Render<V, T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any>['bindings']>;
}
declare const FieldBase: $$IsomorphicComponent;
type FieldBase<V extends FieldValue, T extends FoundationalWidgetType> = InstanceType<typeof FieldBase<V, T>>;
export default FieldBase;
