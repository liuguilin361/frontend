import { type SchemaArrayValue, type SchemaValue, type Validator } from "../../core/index.js";
import { type Config, type FieldError, type FormInternalContext, type PossibleError, type UiOption } from "../../form/index.js";
import { type ItemTitle } from "./model.js";
export interface ArrayContext<V extends Validator> {
    readonly config: Config;
    readonly addable: boolean;
    readonly removable: boolean;
    readonly orderable: boolean;
    readonly copyable: boolean;
    readonly itemTitle: ItemTitle;
    readonly errors: FieldError<PossibleError<V>>[];
    readonly uiOption: UiOption;
    canAdd(): boolean;
    canCopy(index: number): boolean;
    canRemove(index: number): boolean;
    canMoveUp(index: number): boolean;
    canMoveDown(index: number): boolean;
    key(index: number): number;
    itemConfig(config: Config, item: SchemaValue | undefined, index: number): Config;
    pushItem(): void;
    moveItemUp(index: number): void;
    moveItemDown(index: number): void;
    copyItem(index: number): void;
    removeItem(index: number): void;
}
export declare function getArrayContext<V extends Validator>(): ArrayContext<V>;
export declare function setArrayContext<V extends Validator>(ctx: ArrayContext<V>): void;
export declare function createArrayContext<V extends Validator>(ctx: FormInternalContext<V>, config: () => Config, value: () => SchemaArrayValue | undefined, _: (v: SchemaArrayValue) => void): ArrayContext<V>;
export declare function createTupleContext<V extends Validator>(ctx: FormInternalContext<V>, config: () => Config, value: () => SchemaArrayValue | undefined, setValue: (v: SchemaArrayValue) => void): ArrayContext<V>;
