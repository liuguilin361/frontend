import type { Snippet } from "svelte";
import type { AnyComponent } from "./component.js";
import Dynamic from "./dynamic.svelte";
export interface DynamicOptions<E> {
    fallback?: Snippet;
    onerror?: Snippet<[E]>;
}
export declare function dynamic<C extends AnyComponent, E>(loader: () => Promise<{
    default: C;
}>, options?: DynamicOptions<E>): C;
declare class __sveltets_Render<E> {
    props(): {
        componentPromise: () => Promise<Snippet>;
        fallback?: Snippet;
        onerror?: Snippet<[E]> | undefined;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <E>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<E>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<E>['props']>, ReturnType<__sveltets_Render<E>['events']>, ReturnType<__sveltets_Render<E>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<E>['bindings']>;
    } & ReturnType<__sveltets_Render<E>['exports']>;
    <E>(internal: unknown, props: ReturnType<__sveltets_Render<E>['props']> & {}): ReturnType<__sveltets_Render<E>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Dynamic: $$IsomorphicComponent;
type Dynamic<E> = InstanceType<typeof Dynamic<E>>;
export default Dynamic;
