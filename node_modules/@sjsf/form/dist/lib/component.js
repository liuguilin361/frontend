export function cast(Component, propsCast) {
    return function (internals, props) {
        const proxy = new Proxy(props, {
            get(target, p, receiver) {
                const cast = propsCast[p];
                if (cast !== undefined) {
                    const { transform } = cast;
                    if (transform !== undefined) {
                        return transform(target);
                    }
                }
                return Reflect.get(target, p, receiver);
            },
            set(target, p, newValue, receiver) {
                const cast = propsCast[p];
                if (cast !== undefined && "recover" in cast) {
                    const { recover } = cast;
                    if (recover !== undefined) {
                        recover(target, newValue);
                        return true;
                    }
                }
                return Reflect.set(target, p, newValue, receiver);
            },
            has(target, p) {
                return (Reflect.has(target, p) ||
                    propsCast?.[p]?.transform !== undefined);
            },
            // TODO: ownKeys
        });
        return Component(internals, proxy);
    };
}
