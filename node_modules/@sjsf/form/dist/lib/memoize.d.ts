export interface MapLike<K, V> {
    has(key: K): boolean;
    get(key: K): V | undefined;
    set(key: K, value: V): void;
}
export declare function memoize<Arg, Return>(cache: MapLike<Arg, Return>, func: (arg: Arg) => Return): (arg: Arg) => Return;
export declare const weakMemoize: <Arg extends object, Return>(cache: WeakMap<Arg, Return>, fn: (arg: Arg) => Return) => (arg: Arg) => Return;
