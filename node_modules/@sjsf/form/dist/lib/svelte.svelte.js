import { abortPrevious, createAction } from "./action.svelte.js";
export function createAsyncBinding({ initialOutput, getInput, setInput, toInput, toOutput, isEqual = Object.is, }) {
    let lastInputUpdate;
    const toInputAction = createAction({
        combinator: abortPrevious,
        execute: toInput,
        onSuccess(result) {
            lastInputUpdate = result;
            setInput(result);
        },
    });
    let output = $state.raw(initialOutput);
    const toOutputAction = createAction({
        combinator: abortPrevious,
        execute: toOutput,
        onSuccess(result) {
            output = result;
        },
    });
    $effect(() => {
        const input = getInput();
        if (isEqual(input, lastInputUpdate)) {
            return;
        }
        toInputAction.abort();
        toOutputAction.run(input);
    });
    return {
        get current() {
            return output;
        },
        set current(v) {
            toOutputAction.abort();
            toInputAction.run(v);
        },
        get inputProcessing() {
            return toInputAction.isProcessed;
        },
        get outputProcessing() {
            return toOutputAction.isProcessed;
        },
    };
}
