export interface AsyncBindingOptions<I, O> {
    initialOutput: O;
    toOutput: (signal: AbortSignal, input: I) => Promise<O>;
    toInput: (signal: AbortSignal, output: O) => Promise<I>;
    setInput: (v: I) => void;
    getInput: () => I;
    isEqual?: (a: I, b: I | undefined) => boolean;
}
export declare function createAsyncBinding<I, O>({ initialOutput, getInput, setInput, toInput, toOutput, isEqual, }: AsyncBindingOptions<I, O>): {
    current: O;
    readonly inputProcessing: boolean;
    readonly outputProcessing: boolean;
};
