export interface Node<T, V> {
    values: Map<T, Node<T, V>>;
    value: V | undefined;
}
export type Trie<T, V> = Node<T, V> | undefined;
export interface Seq<T> {
    [index: number]: T;
    length: number;
}
export declare function insertValue<T, V>(trie: Trie<T, V>, keys: Seq<T>, value: V, index?: number): Node<T, V>;
export declare function getNodeByKeys<T, V>(trie: Trie<T, V>, keys: Seq<T>): Trie<T, V>;
export declare function getValueByKeys<T, V>(trie: Trie<T, V>, keys: Seq<T>): V | undefined;
