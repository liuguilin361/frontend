import type { Label, Labels, Translate } from "./translation.js";
import type { Config } from "./config.js";
declare class __sveltets_Render<L extends Label> {
    props(): {} extends Labels[L] ? {
        id: L;
        config: Config;
        translate: Translate;
        args?: never;
    } : {
        id: L;
        args: Labels[L];
        translate: Translate;
        config: Config;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <L extends Label>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<L>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<L>['props']>, ReturnType<__sveltets_Render<L>['events']>, ReturnType<__sveltets_Render<L>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<L>['bindings']>;
    } & ReturnType<__sveltets_Render<L>['exports']>;
    <L extends Label>(internal: unknown, props: ReturnType<__sveltets_Render<L>['props']> & {}): ReturnType<__sveltets_Render<L>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Text: $$IsomorphicComponent;
type Text<L extends Label> = InstanceType<typeof Text<L>>;
export default Text;
