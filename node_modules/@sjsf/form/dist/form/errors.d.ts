import { SvelteMap } from "svelte/reactivity";
import type { Action, FailedAction } from "../lib/action.svelte.js";
import type { FieldValue, FormValue } from "./model.js";
import type { Id } from "./id.js";
import type { AdditionalPropertyKeyValidator, AsyncFieldValueValidatorError, AsyncFormValueValidatorError, FieldValueValidatorError, FormValueValidatorError, ValidationError } from "./validator.js";
import type { Config } from "./config.js";
export declare class AdditionalPropertyKeyError {
}
export declare class ValidationProcessError {
    state: FailedAction<unknown>;
    constructor(state: FailedAction<unknown>);
}
export type FieldError<T> = Omit<ValidationError<T>, "instanceId">;
export type FieldErrorsMap<T> = SvelteMap<Id, FieldError<T>[]>;
export type AnyFieldValueValidatorError<V> = FieldValueValidatorError<V> | AsyncFieldValueValidatorError<V>;
export type AnyFormValueValidatorError<V> = FormValueValidatorError<V> | AsyncFormValueValidatorError<V>;
export type AnyValueValidatorError<V> = AnyFormValueValidatorError<V> | AnyFieldValueValidatorError<V>;
export type AdditionalPropertyKeyValidatorError<V> = V extends AdditionalPropertyKeyValidator ? AdditionalPropertyKeyError : never;
export type PossibleError<V> = ValidationProcessError | AnyValueValidatorError<V> | AdditionalPropertyKeyValidatorError<V>;
export interface FormValidationResult<E> {
    formValue: FormValue;
    formErrors: FieldErrorsMap<E>;
}
export type FormSubmission<V> = Action<[
    event: SubmitEvent
], FormValidationResult<AnyFormValueValidatorError<V>>, unknown>;
export type FieldsValidation<V> = Action<[
    config: Config,
    value: FieldValue
], FieldError<AnyFieldValueValidatorError<V>>[], unknown>;
export declare function groupErrors<E>(errors: ValidationError<E>[]): FieldErrorsMap<E>;
