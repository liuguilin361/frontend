import { type Schema, type SchemaValue, type Validator } from "../../core/index.js";
import type { FormInternalContext } from "./context.js";
export declare function isSelect<V extends Validator>(ctx: FormInternalContext<V>, schema: Schema): boolean;
export declare function isMultiSelect<V extends Validator>(ctx: FormInternalContext<V>, schema: Schema): boolean;
export declare function isFilesArray<V extends Validator>(ctx: FormInternalContext<V>, schema: Schema): boolean;
export declare function retrieveSchema<V extends Validator>(ctx: FormInternalContext<V>, schema: Schema, formData: SchemaValue | undefined): Schema;
export declare function sanitizeDataForNewSchema<V extends Validator>(ctx: FormInternalContext<V>, newSchema: Schema, oldSchema: Schema, formData: SchemaValue | undefined): SchemaValue | undefined;
export declare function getClosestMatchingOption<V extends Validator>(ctx: FormInternalContext<V>, formData: SchemaValue | undefined, options: Schema[], selectedOption: number, discriminatorField: string | undefined): number;
export declare function getDefaultFieldState<V extends Validator>(ctx: FormInternalContext<V>, schema: Schema, formData: SchemaValue | undefined): SchemaValue | undefined;
