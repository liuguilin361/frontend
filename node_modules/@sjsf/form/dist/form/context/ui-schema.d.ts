import type { ObjectProperties } from "../../lib/types.js";
import type { Validator } from "../../core/index.js";
import type { Config } from "../config.js";
import { type UiSchema, type UiSchemaDefinition, type UiOptions } from "../ui-schema.js";
import type { FormInternalContext } from "./context.js";
export declare function retrieveUiSchema<V extends Validator>(ctx: FormInternalContext<V>, uiSchemaDef: UiSchemaDefinition | undefined): UiSchema;
export declare function uiTitleOption<V extends Validator>(ctx: FormInternalContext<V>, uiSchema: UiSchema): string | undefined;
export declare function retrieveUiOption<V extends Validator, O extends keyof UiOptions>(ctx: FormInternalContext<V>, config: Config, option: O): UiOptions[O] | NonNullable<import("../../lib/resolver.js").Resolved<O, Partial<UiOptions>>> | undefined;
export type ObjectUiOptions = ObjectProperties<UiOptions>;
export declare function uiOptionProps<O extends keyof ObjectUiOptions>(option: O): <V extends Validator>(props: NonNullable<UiOptions[O]>, config: Config, ctx: FormInternalContext<V>) => NonNullable<UiOptions[O]>;
export declare function uiOptionNestedProps<O extends keyof ObjectUiOptions, R extends object>(option: O, selector: (data: NonNullable<UiOptions[O]>) => R | undefined): <V extends Validator>(props: R, config: Config, ctx: FormInternalContext<V>) => R;
export declare function retrieveTranslate<V extends Validator>(ctx: FormInternalContext<V>, config: Config): <L extends import("../translation.js").Label>(label: L, params: import("../translation.js").Labels[L]) => string;
