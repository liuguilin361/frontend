import { createPseudoId } from "../id.js";
import { uiOptionNestedProps, uiOptionProps, } from "./ui-schema.js";
export function composeProps(ctx, config, props, ...options) {
    for (let i = 0; i < options.length; i++) {
        props = options[i](props, config, ctx);
    }
    return props;
}
export function assignProps(options) {
    return (props) => Object.assign(props, options);
}
export function isDisabled(ctx, attributes) {
    return attributes?.disabled || ctx.disabled;
}
export function disabledProp(obj, _, ctx) {
    obj.disabled ||= ctx.disabled;
    return obj;
}
export function inputType(format) {
    switch (format) {
        case "date-time":
            return "datetime-local";
        case "uri":
            return "url";
        case "color":
        case "date":
        case "time":
        case "email":
            return format;
        default:
            return undefined;
    }
}
const DEFAULT_DESCRIBE_ELEMENTS = [
    "description",
    "help",
    "errors",
];
const DEFAULT_DESCRIBE_ELEMENTS_WITH_EXAMPLES = DEFAULT_DESCRIBE_ELEMENTS.concat("examples");
export function describedBy(ctx, config) {
    return (Array.isArray(config.schema.examples)
        ? DEFAULT_DESCRIBE_ELEMENTS_WITH_EXAMPLES
        : DEFAULT_DESCRIBE_ELEMENTS)
        .map((el) => createPseudoId(config.id, el, ctx))
        .join(" ");
}
export function inputProps(handlers) {
    return (props, config, ctx) => {
        const { id, required, schema } = config;
        props.id = id;
        props.name = id;
        const type = inputType(schema.format);
        if (type !== undefined) {
            props.type = type;
        }
        props.required = required;
        props.minlength = schema.minLength;
        props.maxlength = schema.maxLength;
        props.pattern = schema.pattern;
        props.min = schema.minimum;
        props.max = schema.maximum;
        props.step =
            schema.multipleOf ?? (schema.type === "number" ? "any" : undefined);
        props.list = Array.isArray(schema.examples)
            ? createPseudoId(id, "examples", ctx)
            : undefined;
        props.readonly = schema.readOnly;
        props.oninput = handlers.oninput;
        props.onchange = handlers.onchange;
        props.onblur = handlers.onblur;
        props["aria-describedby"] = describedBy(ctx, config);
        return props;
    };
}
export function textareaProps(handlers) {
    return (props, config, ctx) => {
        const { id, required, schema } = config;
        props.id = id;
        props.name = id;
        props.required = required;
        props.minlength = schema.minLength;
        props.maxlength = schema.maxLength;
        props.readonly = schema.readOnly;
        props.oninput = handlers.oninput;
        props.onchange = handlers.onchange;
        props.onblur = handlers.onblur;
        props["aria-describedby"] = describedBy(ctx, config);
        return props;
    };
}
export function selectProps(handlers) {
    return (props, config, ctx) => {
        const { id, required } = config;
        props.id = id;
        props.name = id;
        props.required = required;
        props.oninput = handlers.oninput;
        props.onchange = handlers.onchange;
        props.onblur = handlers.onblur;
        props["aria-describedby"] = describedBy(ctx, config);
        return props;
    };
}
export function forProp(props, config) {
    props.for = config.id;
    return props;
}
export function idProp(element) {
    return (props, config, ctx) => {
        props.id = createPseudoId(config.id, element, ctx);
        return props;
    };
}
export function tabindexProp(tabindex) {
    return (props) => {
        props.tabindex = tabindex;
        return props;
    };
}
export function dataLayoutProp(type) {
    return (props) => {
        props["data-layout"] = type;
        return props;
    };
}
export function buttonTypeProp(type) {
    return (props) => {
        props.type = type;
        return props;
    };
}
export function descriptionAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, idProp("description"), uiOptionProps(option));
}
export function errorsListAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, idProp("errors"), tabindexProp(-1), uiOptionProps(option));
}
export function formAttributes(ctx, config, option, attributes, props) {
    return composeProps(ctx, config, props, uiOptionProps(option), assignProps(attributes));
}
export function helpAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, idProp("help"), uiOptionProps(option));
}
export function labelAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, forProp, uiOptionProps(option));
}
export function titleAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, idProp("title"), uiOptionProps(option));
}
// WARN: basic layout depends on amount of required props
export function layoutAttributes(ctx, config, option, nestedOption, type, props) {
    return composeProps(ctx, config, props, dataLayoutProp(type), uiOptionProps(option), uiOptionNestedProps(nestedOption, (t) => t[type]));
}
export function buttonAttributes(ctx, config, option, type, props) {
    return composeProps(ctx, config, props, buttonTypeProp(type), uiOptionProps(option), disabledProp);
}
export function customInputAttributes(ctx, config, option, props) {
    return composeProps(ctx, config, props, uiOptionProps(option), disabledProp);
}
export function inputAttributes(ctx, config, option, handlers, props) {
    return composeProps(ctx, config, props, inputProps(handlers), uiOptionProps(option), disabledProp);
}
export function selectAttributes(ctx, config, option, handlers, props) {
    return composeProps(ctx, config, props, selectProps(handlers), uiOptionProps(option), disabledProp);
}
export function textareaAttributes(ctx, config, option, handlers, props) {
    return composeProps(ctx, config, props, textareaProps(handlers), uiOptionProps(option), disabledProp);
}
