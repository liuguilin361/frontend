import { overrideByRecord } from "../../lib/resolver.js";
import { resolveUiRef, resolveUiOption as resolveUiOptionInternal, } from "../ui-schema.js";
import { createTranslate } from "../translation.js";
export function retrieveUiSchema(ctx, uiSchemaDef) {
    return resolveUiRef(ctx.uiSchemaRoot, uiSchemaDef) ?? {};
}
function resolveUiOption(ctx, uiSchema, option) {
    return resolveUiOptionInternal(ctx.uiSchemaRoot, ctx.uiOptionsRegistry, uiSchema, option);
}
export function uiTitleOption(ctx, uiSchema) {
    return resolveUiOption(ctx, uiSchema, "title");
}
export function retrieveUiOption(ctx, config, option) {
    return (ctx.extraUiOptions?.(option, config) ??
        resolveUiOption(ctx, config.uiSchema, option));
}
export function uiOptionProps(option) {
    return (props, config, ctx) => {
        return Object.assign(props, resolveUiOption(ctx, config.uiSchema, option), ctx.extraUiOptions?.(option, config));
    };
}
export function uiOptionNestedProps(option, selector) {
    return (props, config, ctx) => {
        const options = resolveUiOption(ctx, config.uiSchema, option);
        const extraOptions = ctx.extraUiOptions?.(option, config);
        return Object.assign(props, options && selector(options), extraOptions && selector(extraOptions));
    };
}
export function retrieveTranslate(ctx, config) {
    let translation = ctx.translation;
    const uiOption = resolveUiOption(ctx, config.uiSchema, "translations");
    translation = uiOption
        ? overrideByRecord(translation, uiOption)
        : translation;
    const extraUiOption = ctx.extraUiOptions?.("translations", config);
    translation = extraUiOption
        ? overrideByRecord(translation, extraUiOption)
        : translation;
    return createTranslate(translation);
}
