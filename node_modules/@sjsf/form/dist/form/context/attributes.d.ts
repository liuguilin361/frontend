import type { HTMLButtonAttributes, HTMLFormAttributes, HTMLInputAttributes, HTMLSelectAttributes, HTMLTextareaAttributes } from "svelte/elements";
import type { Nullable, ObjectProperties } from "../../lib/types.js";
import type { Validator } from "../../core/index.js";
import type { Config } from "../config.js";
import { type IdentifiableFieldElement } from "../id.js";
import type { UiOptions } from "../ui-schema.js";
import type { FormInternalContext } from "./context.js";
import { type ObjectUiOptions } from "./ui-schema.js";
interface Disabled {
    disabled: boolean;
}
interface Handlers {
    onblur?: () => void;
    oninput?: () => void;
    onchange?: () => void;
}
export declare function composeProps<V extends Validator, A>(ctx: FormInternalContext<V>, config: Config, props: A): A;
export declare function composeProps<V extends Validator, A, B>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B): B;
export declare function composeProps<V extends Validator, A, B, C>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B, bc: (props: B, config: Config, ctx: FormInternalContext<V>) => C): C;
export declare function composeProps<V extends Validator, A, B, C, D>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B, bc: (props: B, config: Config, ctx: FormInternalContext<V>) => C, cd: (props: C, config: Config, ctx: FormInternalContext<V>) => D): D;
export declare function composeProps<V extends Validator, A, B, C, D, E>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B, bc: (props: B, config: Config, ctx: FormInternalContext<V>) => C, cd: (props: C, config: Config, ctx: FormInternalContext<V>) => D, de: (props: D, config: Config, ctx: FormInternalContext<V>) => E): E;
export declare function composeProps<V extends Validator, A, B, C, D, E, F>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B, bc: (props: B, config: Config, ctx: FormInternalContext<V>) => C, cd: (props: C, config: Config, ctx: FormInternalContext<V>) => D, de: (props: D, config: Config, ctx: FormInternalContext<V>) => E, ef: (props: E, config: Config, ctx: FormInternalContext<V>) => F): F;
export declare function composeProps<V extends Validator, A, B, C, D, E, F, G>(ctx: FormInternalContext<V>, config: Config, props: A, ab: (props: A, config: Config, ctx: FormInternalContext<V>) => B, bc: (props: B, config: Config, ctx: FormInternalContext<V>) => C, cd: (props: C, config: Config, ctx: FormInternalContext<V>) => D, de: (props: D, config: Config, ctx: FormInternalContext<V>) => E, ef: (props: E, config: Config, ctx: FormInternalContext<V>) => F, fg: (props: F, config: Config, ctx: FormInternalContext<V>) => G): G;
export declare function assignProps<O>(options: O): <T extends object>(props: T) => T & O;
export declare function isDisabled<V extends Validator>(ctx: FormInternalContext<V>, attributes?: Partial<Nullable<Disabled>>): boolean;
export declare function disabledProp<V extends Validator, T>(obj: T & Partial<Nullable<Disabled>>, _: Config, ctx: FormInternalContext<V>): T & Disabled;
export declare function inputType(format: string | undefined): "time" | "email" | "datetime-local" | "url" | "color" | "date" | undefined;
export declare function describedBy<V extends Validator>(ctx: FormInternalContext<V>, config: Config): string;
export declare function inputProps(handlers: Handlers): <V extends Validator, T>(props: T & HTMLInputAttributes, config: Config, ctx: FormInternalContext<V>) => T & HTMLInputAttributes;
export declare function textareaProps(handlers: Handlers): <T, V extends Validator>(props: T & HTMLTextareaAttributes, config: Config, ctx: FormInternalContext<V>) => T & HTMLTextareaAttributes;
export declare function selectProps(handlers: Handlers): <T, V extends Validator>(props: T & HTMLSelectAttributes, config: Config, ctx: FormInternalContext<V>) => T & HTMLSelectAttributes;
type WithFor<T> = T & {
    for?: string;
};
export declare function forProp<T>(props: WithFor<T>, config: Config): WithFor<T>;
type WithId<T> = T & {
    id?: string;
};
export declare function idProp(element: keyof IdentifiableFieldElement): <V extends Validator, T>(props: WithId<T>, config: Config, ctx: FormInternalContext<V>) => WithId<T>;
type WithTabIndex<T> = T & {
    tabindex?: number;
};
export declare function tabindexProp(tabindex: number): <T>(props: WithTabIndex<T>) => WithTabIndex<T>;
type WithDataLayout<T> = T & {
    "data-layout"?: string;
};
export declare function dataLayoutProp(type: string): <T>(props: WithDataLayout<T>) => WithDataLayout<T>;
export declare function buttonTypeProp(type: Exclude<HTMLButtonAttributes["type"], undefined>): <T>(props: T & HTMLButtonAttributes) => T & HTMLButtonAttributes;
export declare function descriptionAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O]>;
export declare function errorsListAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O]>;
export declare function formAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, attributes: HTMLFormAttributes | undefined, props: NonNullable<UiOptions[O]>): UiOptions[O] & HTMLFormAttributes;
export declare function helpAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O]>;
export declare function labelAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O]>;
export declare function titleAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O]>;
export declare function layoutAttributes<V extends Validator, O extends keyof ObjectUiOptions, O2 extends keyof ObjectUiOptions, T extends keyof ObjectProperties<NonNullable<UiOptions[O2]>>>(ctx: FormInternalContext<V>, config: Config, option: O, nestedOption: O2, type: T, props: NonNullable<UiOptions[O]>): NonNullable<UiOptions[O2]>;
export declare function buttonAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, type: Exclude<HTMLButtonAttributes["type"], undefined>, props: NonNullable<UiOptions[O]>): UiOptions[O] & Disabled;
export declare function customInputAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, props: NonNullable<UiOptions[O]>): UiOptions[O] & Disabled;
export declare function inputAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, handlers: Handlers, props: NonNullable<UiOptions[O]>): UiOptions[O] & Disabled;
export declare function selectAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, handlers: Handlers, props: NonNullable<UiOptions[O]>): UiOptions[O] & Disabled;
export declare function textareaAttributes<V extends Validator, O extends keyof ObjectUiOptions>(ctx: FormInternalContext<V>, config: Config, option: O, handlers: Handlers, props: NonNullable<UiOptions[O]>): UiOptions[O] & Disabled;
export {};
