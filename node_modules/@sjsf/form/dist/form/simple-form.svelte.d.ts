import type { Validator } from '../core/index.js';
import { type FormOptions } from "./create-form.svelte.js";
declare class __sveltets_Render<T, V extends Validator> {
    props(): FormOptions<T, V>;
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T, V extends Validator>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T, V>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T, V>['props']>, ReturnType<__sveltets_Render<T, V>['events']>, ReturnType<__sveltets_Render<T, V>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T, V>['bindings']>;
    } & ReturnType<__sveltets_Render<T, V>['exports']>;
    <T, V extends Validator>(internal: unknown, props: ReturnType<__sveltets_Render<T, V>['props']> & {}): ReturnType<__sveltets_Render<T, V>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any>['bindings']>;
}
declare const SimpleForm: $$IsomorphicComponent;
type SimpleForm<T, V extends Validator> = InstanceType<typeof SimpleForm<T, V>>;
export default SimpleForm;
