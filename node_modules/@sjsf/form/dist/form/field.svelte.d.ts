import type { Snippet } from "svelte";
import type { JsonPaths } from "../lib/types.js";
import { type Validator } from "../core/index.js";
import type { FormState } from "./create-form.svelte.js";
import type { FieldValue } from "./model.js";
import { type UiSchema } from "./ui-schema.js";
declare class __sveltets_Render<T, V extends Validator, N extends JsonPaths<T>> {
    props(): {
        form: FormState<T, V>;
        name: N;
        required?: boolean;
        uiSchema?: UiSchema;
        render?: Snippet<[Omit<import("./fields.js").FieldCommonProps<string> | import("./fields.js").FieldCommonProps<number> | import("./fields.js").FieldCommonProps<boolean> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaObjectValue> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaArrayValue> | import("./fields.js").FieldCommonProps<null> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaValue> | import("./fields.js").FieldCommonProps<string[]>, "value"> & {
            valueRef: {
                value: FieldValue;
            };
        }]> | undefined;
        /**
         * @deprecated use `render` instead
         */
        children?: Snippet<[Omit<import("./fields.js").FieldCommonProps<string> | import("./fields.js").FieldCommonProps<number> | import("./fields.js").FieldCommonProps<boolean> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaObjectValue> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaArrayValue> | import("./fields.js").FieldCommonProps<null> | import("./fields.js").FieldCommonProps<import("../core/index.js").SchemaValue> | import("./fields.js").FieldCommonProps<string[]>, "value"> & {
            valueRef: {
                value: FieldValue;
            };
        }]> | undefined;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T, V extends Validator, N extends JsonPaths<T>>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T, V, N>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T, V, N>['props']>, ReturnType<__sveltets_Render<T, V, N>['events']>, ReturnType<__sveltets_Render<T, V, N>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T, V, N>['bindings']>;
    } & ReturnType<__sveltets_Render<T, V, N>['exports']>;
    <T, V extends Validator, N extends JsonPaths<T>>(internal: unknown, props: ReturnType<__sveltets_Render<T, V, N>['props']> & {}): ReturnType<__sveltets_Render<T, V, N>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any, any, any>['bindings']>;
}
declare const Field: $$IsomorphicComponent;
type Field<T, V extends Validator, N extends JsonPaths<T>> = InstanceType<typeof Field<T, V, N>>;
export default Field;
