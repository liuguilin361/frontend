import type { Resolver } from "../lib/resolver.js";
import type { Path } from "../core/index.js";
import type { CompatibleComponentType, ComponentDefinitions, FoundationalComponentType } from "./components.js";
import type { Config } from "./config.js";
export interface UiOptions {
}
export type UiOption = <O extends keyof UiOptions>(opt: O) => UiOptions[O];
export interface UiOptionsRegistry {
}
export type ResolvableUiOption<T> = {
    [K in keyof UiOptionsRegistry]: UiOptionsRegistry[K] extends T ? `registry:${K}` : never;
}[keyof UiOptionsRegistry] | T;
export type ResolvableUiOptions = {
    [K in keyof UiOptions]: ResolvableUiOption<UiOptions[K]>;
};
export interface UiSchemaContent {
    /**
     * Extendable set of UI options
     */
    "ui:options"?: ResolvableUiOptions;
    /**
     * Components override
     */
    "ui:components"?: Partial<{
        [T in FoundationalComponentType]: Exclude<CompatibleComponentType<T>, T> | ComponentDefinitions[T];
    }>;
    items?: UiSchemaDefinition | UiSchemaDefinition[];
    anyOf?: UiSchemaDefinition[];
    oneOf?: UiSchemaDefinition[];
    additionalProperties?: UiSchemaDefinition;
    additionalPropertyKeyInput?: UiSchemaDefinition;
    additionalItems?: UiSchemaDefinition;
}
export type UiSchema = UiSchemaContent & {
    [key: string]: UiSchemaContent[keyof UiSchemaContent];
};
export interface UiSchemaRef {
    $ref: string;
}
export type UiSchemaDefinition = UiSchema | UiSchemaRef;
export type UiSchemaRoot = UiSchemaDefinition & {
    "ui:globalOptions"?: UiOptions;
    "ui:definitions"?: Record<string, UiSchema>;
};
export type ExtraUiOptions = Resolver<Partial<Record<keyof UiOptions, Config>>, Partial<UiOptions>>;
export declare function isUiSchemaRef(def: UiSchemaDefinition | undefined): def is UiSchemaRef;
export declare function resolveUiRef(rootSchema: UiSchemaRoot, schemaDef: UiSchemaDefinition | undefined): UiSchema | undefined;
export declare function resolveUiOption<O extends keyof UiOptions>(uiSchemaRoot: UiSchemaRoot, uiOptionsRegistry: UiOptionsRegistry, uiSchema: UiSchema, option: O): UiOptions[O] | undefined;
export declare function getUiSchemaByPath(rootSchema: UiSchemaRoot, schemaDef: UiSchemaDefinition | undefined, path: Path): UiSchema | undefined;
export declare function getRootUiSchemaTitleByPath(uiSchemaRoot: UiSchemaRoot, path: Path): string | undefined;
