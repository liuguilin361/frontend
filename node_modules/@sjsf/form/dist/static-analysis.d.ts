import { type Path, type Schema, type SchemaValue } from "./core/index.js";
export declare const SEQUENCE_OF_DIGITS_REGEX: RegExp;
export interface SchemaIssue {
    issuer: string;
    message: string;
    path: Path;
}
export declare const ID_CONFIG_ISSUER = "idConfig";
export declare const SCHEMA_ISSUER = "schema";
export interface IdConfig {
    prefix: string;
    separator: string;
    pseudoSeparator: string;
}
export declare function makeIdConfig({ prefix, pseudoSeparator, separator }?: Partial<IdConfig>): IdConfig;
export type IdSeparatorEntries = [string, string][];
export declare function makeIdSeparatorEntries(idConfig: IdConfig): [string, string][];
export declare function idConfigAnalysis(idConfig: IdConfig): Generator<SchemaIssue>;
export declare function objectKeyAnalysis(issuer: string, idSeparatorEntries: IdSeparatorEntries, key: string, path: Path): Generator<SchemaIssue>;
export declare function schemaValueAnalysis(issuer: string, idSeparatorEntries: IdSeparatorEntries, value: SchemaValue, basePath?: Path): Generator<SchemaIssue>;
export declare function schemaAnalysis(idSeparatorEntries: IdSeparatorEntries, schema: Schema): Generator<SchemaIssue>;
export interface StaticAnalysisOptions<T extends SchemaValue> {
    schema: Schema;
    idConfig: IdConfig;
    initialValue?: T;
}
export declare function staticAnalysis<T extends SchemaValue>({ schema, idConfig, initialValue, }: StaticAnalysisOptions<T>): Generator<SchemaIssue>;
