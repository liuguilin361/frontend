import { getRootSchemaTitleByPath, getRootUiSchemaTitleByPath, pathToId, } from "../form/main.js";
function issueToPath({ path }) {
    if (!path) {
        return [];
    }
    return path.map((val) => (typeof val === "object" ? val.key : val));
}
function createErrorsTransformer(options) {
    return ({ issues }, rootSchema) => {
        if (!issues) {
            return [];
        }
        return issues.map((issue) => {
            const path = issueToPath(issue);
            const instanceId = pathToId(path, options);
            const propertyTitle = getRootUiSchemaTitleByPath(options.uiSchema ?? {}, path) ??
                getRootSchemaTitleByPath(rootSchema, path) ??
                path[path.length - 1] ??
                instanceId;
            return {
                instanceId,
                propertyTitle: String(propertyTitle),
                message: issue.message,
                error: issue,
            };
        });
    };
}
export function createFormValueValidator(options) {
    const transform = createErrorsTransformer(options);
    return {
        validateFormValue(rootSchema, formValue) {
            const result = options.schema["~standard"].validate(formValue);
            if (result instanceof Promise) {
                throw new TypeError("Schema validation must be synchronous");
            }
            return transform(result, rootSchema);
        },
    };
}
export function createAsyncFormValueValidator(options) {
    const transform = createErrorsTransformer(options);
    return {
        async validateFormValueAsync(_, rootSchema, formValue) {
            const result = await options.schema["~standard"].validate(formValue);
            return transform(result, rootSchema);
        },
    };
}
