import { weakMemoize } from "../lib/memoize.js";
import { transformSchemaDefinition, } from "../core/index.js";
// This is an attempt to restore the original scheme for correct field validation
// TODO: Remove in v3
export function removeVirtualAdditionalProperties(schema) {
    return transformSchemaDefinition(schema, (copy) => {
        if (typeof copy === "boolean") {
            return copy;
        }
        const { properties } = copy;
        if (properties === undefined) {
            return copy;
        }
        for (const key of Object.keys(properties)) {
            const property = properties[key];
            if (typeof property === "boolean") {
                continue;
            }
            //@ts-expect-error
            if (property[ADDITIONAL_PROPERTY_FLAG]) {
                // NOTE: properties also a copy
                delete properties[key];
            }
        }
        return copy;
    });
}
export function createVirtualAdditionalPropertiesRemover(cache = new WeakMap()) {
    return weakMemoize(cache, (config) => ({
        ...config,
        schema: removeVirtualAdditionalProperties(config.schema),
    }));
}
export function createPatternPropertyKeyValidator(error) {
    return {
        validateAdditionalPropertyKey(key, { patternProperties, additionalProperties }) {
            let patterns;
            return patternProperties === undefined ||
                additionalProperties !== false ||
                ((patterns = Object.keys(patternProperties)), patterns.length === 0) ||
                patterns.some((k) => new RegExp(k).test(key))
                ? []
                : [
                    typeof error === "string"
                        ? error
                        : error({ key, patternProperties }),
                ];
        },
    };
}
