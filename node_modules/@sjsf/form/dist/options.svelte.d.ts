import { type EnumOption, type SchemaArrayValue, type SchemaValue } from "./core/index.js";
export interface OptionsMapper<V> {
    fromValue: (value: SchemaValue | undefined) => V;
    toValue: (value: V) => SchemaValue | undefined;
}
export declare function indexMapper(options: EnumOption<SchemaValue>[]): OptionsMapper<number>;
export declare function stringIndexMapper(options: EnumOption<SchemaValue>[]): OptionsMapper<string>;
export declare function singleOption<V>({ mapper, value, update, }: {
    mapper: () => OptionsMapper<V>;
    value: () => SchemaValue | undefined;
    update: (value: SchemaValue | undefined) => void;
}): {
    value: V;
};
export declare function multipleOptions<V>({ mapper, value, update, }: {
    mapper: () => OptionsMapper<V>;
    value: () => SchemaArrayValue | undefined;
    update: (value: SchemaArrayValue) => void;
}): {
    value: V[];
};
