import { isObject } from "./lib/object.js";
import { isSchemaValueDeepEqual, } from "./core/index.js";
export function indexMapper(options) {
    const map = new Map(options.map((option, index) => [option.value, index]));
    return {
        fromValue(value) {
            if (value === undefined) {
                return -1;
            }
            const index = map.get(value);
            if (index !== undefined) {
                return index;
            }
            if (!isObject(value)) {
                return options.findIndex((option) => option.value === value);
            }
            return options.findIndex((option) => isSchemaValueDeepEqual(option.value, value));
        },
        toValue(index) {
            return options[index]?.value;
        },
    };
}
export function stringIndexMapper(options) {
    const { fromValue, toValue } = indexMapper(options);
    return {
        fromValue(value) {
            return String(fromValue(value));
        },
        toValue(value) {
            return toValue(Number(value));
        },
    };
}
export function singleOption({ mapper, value, update, }) {
    const { fromValue, toValue } = $derived(mapper());
    const val = $derived(fromValue(value()));
    return {
        get value() {
            return val;
        },
        set value(v) {
            update(toValue(v));
        },
    };
}
export function multipleOptions({ mapper, value, update, }) {
    const { fromValue, toValue } = $derived(mapper());
    const val = $derived(value()?.map(fromValue) ?? []);
    return {
        get value() {
            return val;
        },
        set value(v) {
            update(v.map(toValue));
        },
    };
}
