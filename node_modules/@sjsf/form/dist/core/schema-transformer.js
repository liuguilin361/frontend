import { SUB_SCHEMAS, RECORDS_OF_SUB_SCHEMAS, ARRAYS_OF_SUB_SCHEMAS, isSchema, } from "./schema.js";
export function transformSchemaDefinition(schema, transform, ctx = { type: "root", path: [] }) {
    if (!isSchema(schema)) {
        return transform(schema, ctx);
    }
    const shallowCopy = {
        ...schema,
    };
    for (const key of ARRAYS_OF_SUB_SCHEMAS) {
        const array = schema[key];
        if (array === undefined || !Array.isArray(array)) {
            continue;
        }
        const c = {
            type: "array",
            parent: schema,
            key,
            index: 0,
            path: ctx.path.concat(key, 0),
        };
        shallowCopy[key] = array.map((item, index) => {
            c.index = index;
            c.path[c.path.length - 1] = index;
            return transformSchemaDefinition(item, transform, c);
        });
    }
    const map = new Map();
    for (const key of RECORDS_OF_SUB_SCHEMAS) {
        const record = schema[key];
        if (record === undefined) {
            continue;
        }
        const c = {
            type: "record",
            parent: schema,
            key,
            property: "",
            path: ctx.path.concat(key, ""),
        };
        for (const [property, value] of Object.entries(record)) {
            if (Array.isArray(value)) {
                continue;
            }
            c.property = property;
            c.path[c.path.length - 1] = property;
            map.set(property, transformSchemaDefinition(value, transform, c));
        }
        shallowCopy[key] = Object.fromEntries(map);
        map.clear();
    }
    const c = {
        type: "sub",
        parent: schema,
        key: "items",
        path: ctx.path.concat(""),
    };
    for (const key of SUB_SCHEMAS) {
        const value = schema[key];
        if (value === undefined || Array.isArray(value)) {
            continue;
        }
        c.key = key;
        c.path[c.path.length - 1] = key;
        shallowCopy[key] = transformSchemaDefinition(value, transform, c);
    }
    return transform(shallowCopy, ctx);
}
