import { DEPENDENCIES_KEY, type Schema, type SchemaDefinition, type SchemaObjectValue, type SchemaValue, type SchemaWithProperties } from "./schema.js";
import type { Validator } from "./validator.js";
import type { Merger } from "./merger.js";
export declare function retrieveSchema(validator: Validator, merger: Merger, schema: Schema, rootSchema?: Schema, formData?: SchemaValue): Schema;
export declare function resolveAllReferences(schema: Schema, rootSchema: Schema, stack?: Set<string>): Schema;
export declare function resolveReference(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
/**
 * @private
 */
export declare function retrieveSchemaInternal(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, formData?: SchemaValue, expandAllBranches?: boolean, stack?: Set<string>): Schema[];
export declare function resolveCondition(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
/**
 * WARN: This function will mutate `schema.properties` property
 */
export declare function stubExistingAdditionalProperties(validator: Validator, merger: Merger, schema: SchemaWithProperties, rootSchema: Schema, formData: SchemaObjectValue | undefined): Schema;
export declare function resolveSchema(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
export declare function resolveDependencies(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
export declare function resolveAnyOrOneOfSchemas(validator: Validator, schema: Schema, rootSchema: Schema, expandAllBranches: boolean, rawFormData?: SchemaValue): Schema[];
export declare function processDependencies(validator: Validator, merger: Merger, dependencies: Schema[typeof DEPENDENCIES_KEY], resolvedSchema: Schema, rootSchema: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
export declare function withDependentSchema(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, dependencyKey: string, dependencyValue: Schema, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
export declare function withExactlyOneSubSchema(validator: Validator, merger: Merger, schema: Schema, rootSchema: Schema, dependencyKey: string, oneOf: Exclude<Schema["oneOf"], undefined>, expandAllBranches: boolean, stack: Set<string>, formData?: SchemaValue): Schema[];
export declare function getAllPermutationsOfXxxOf(listOfLists: SchemaDefinition[][]): SchemaDefinition[][];
export declare function getMatchingPatternProperties(patternProperties: Exclude<Schema["patternProperties"], undefined>, key: string): SchemaDefinition[];
