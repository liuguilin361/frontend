import { type SubSchemasArrayKey, type SchemaDefinition, type SubSchemaKey, type SubSchemasRecordKey, type Schema, type SchemaKey } from "./schema.js";
import type { Visitor } from "./traverser.js";
import type { Path } from "./path.js";
export type SchemaTraverserContextType = "array" | "record" | "sub" | "root";
export interface AbstractSchemaTraverserContext<T extends SchemaTraverserContextType, K extends SchemaKey> {
    type: T;
    path: SubSchemasArrayKey extends K ? Path : string[];
}
export interface ArraySchemaTraverserContext<K extends SchemaKey> extends AbstractSchemaTraverserContext<"array", K> {
    parent: Schema;
    key: SubSchemasArrayKey & K;
    index: number;
}
export interface RecordSchemaTraverserContext<K extends SchemaKey> extends AbstractSchemaTraverserContext<"record", K> {
    parent: Schema;
    key: SubSchemasRecordKey & K;
    property: string;
}
export interface SubSchemaTraverserContext<K extends SchemaKey> extends AbstractSchemaTraverserContext<"sub", K> {
    parent: Schema;
    key: SubSchemaKey & K;
}
export interface RootSchemaTraverserContext<K extends SchemaKey> extends AbstractSchemaTraverserContext<"root", K> {
}
export type SchemaTraverserContext<K extends SchemaKey> = ArraySchemaTraverserContext<K> | RecordSchemaTraverserContext<K> | SubSchemaTraverserContext<K> | RootSchemaTraverserContext<K>;
export type SchemaDefinitionVisitor<K extends SchemaKey, R> = Visitor<SchemaDefinition, SchemaTraverserContext<K>, R>;
export declare function makeSchemaDefinitionTraverser<const K extends SchemaKey, R>(keys: ReadonlyArray<K>, visitor: SchemaDefinitionVisitor<K, R>): (schema: SchemaDefinition, ctx?: SchemaTraverserContext<K>) => Generator<R>;
