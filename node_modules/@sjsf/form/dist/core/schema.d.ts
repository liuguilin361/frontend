import type { JSONSchema7, JSONSchema7TypeName } from "json-schema";
export type TransformedSchema<R, S> = Omit<S, SubSchemaKey | SubSchemasArrayKey | SubSchemasRecordKey> & {
    items?: R | R[] | undefined;
    additionalItems?: R | undefined;
    contains?: R | undefined;
    additionalProperties?: R | undefined;
    propertyNames?: R | undefined;
    if?: R | undefined;
    then?: R | undefined;
    else?: R | undefined;
    not?: R | undefined;
    $defs?: Record<string, R> | undefined;
    properties?: Record<string, R> | undefined;
    patternProperties?: Record<string, R> | undefined;
    dependencies?: Record<string, R | string[]> | undefined;
    definitions?: Record<string, R> | undefined;
    allOf?: R[] | undefined;
    anyOf?: R[] | undefined;
    oneOf?: R[] | undefined;
};
export type TransformedSchemaDefinition<R, S> = TransformedSchema<R, S> | boolean;
export interface OpenAPIDiscriminator {
    propertyName: string;
}
export interface Schema extends TransformedSchema<SchemaDefinition, JSONSchema7> {
    discriminator?: OpenAPIDiscriminator;
}
export type SchemaDefinition = boolean | Schema;
export type SchemaWithProperties = Schema & {
    properties: Exclude<Schema["properties"], undefined>;
};
export type SchemaType = JSONSchema7TypeName;
export type SchemaValue = string | number | boolean | SchemaObjectValue | SchemaArrayValue | null;
export interface SchemaObjectValue {
    [key: string]: SchemaValue | undefined;
}
export interface SchemaArrayValue extends Array<SchemaValue | undefined> {
}
export declare const REF_KEY = "$ref";
export declare const ID_KEY = "$id";
export declare const DEFS_KEY = "$defs";
export declare const DEFINITIONS_KEY = "definitions";
export declare const PROPERTIES_KEY = "properties";
export declare const ITEMS_KEY = "items";
export declare const DEPENDENCIES_KEY = "dependencies";
export declare const REQUIRED_KEY = "required";
export declare const PATTERN_PROPERTIES_KEY = "patternProperties";
export declare const DEFAULT_KEY = "default";
export declare const CONST_KEY = "const";
export declare const IF_KEY = "if";
export declare const THEN_KEY = "then";
export declare const ELSE_KEY = "else";
export declare const CONTAINS_KEY = "contains";
export declare const ALL_OF_KEY = "allOf";
export declare const ANY_OF_KEY = "anyOf";
export declare const ONE_OF_KEY = "oneOf";
export declare const NOT_KEY = "not";
export declare const ROOT_SCHEMA_PREFIX = "__sjsf_rootSchema";
export declare const ADDITIONAL_PROPERTY_FLAG = "__additional_property";
export declare const ADDITIONAL_PROPERTIES_KEY = "additionalProperties";
export declare const ADDITIONAL_ITEMS_KEY = "additionalItems";
export declare const PROPERTY_NAMES_KEY = "propertyNames";
export declare const DISCRIMINATOR_KEY = "discriminator";
export declare const PROPERTY_NAME_KEY = "propertyName";
export declare const DATA_URL_FORMAT = "data-url";
export declare const RECORDS_OF_SUB_SCHEMAS: readonly ["$defs", "definitions", "properties", "patternProperties", "dependencies"];
export declare const SET_OF_RECORDS_OF_SUB_SCHEMAS: Set<"$defs" | "definitions" | "properties" | "patternProperties" | "dependencies">;
export type SubSchemasRecordKey = (typeof RECORDS_OF_SUB_SCHEMAS)[number];
export declare const ARRAYS_OF_SUB_SCHEMAS: readonly ["items", "allOf", "oneOf", "anyOf"];
export declare const SET_OF_ARRAYS_OF_SUB_SCHEMAS: Set<"items" | "allOf" | "oneOf" | "anyOf">;
export type SubSchemasArrayKey = (typeof ARRAYS_OF_SUB_SCHEMAS)[number];
export declare const SUB_SCHEMAS: readonly ["items", "additionalItems", "additionalProperties", "propertyNames", "contains", "if", "then", "else", "not"];
export declare const SET_OF_SUB_SCHEMAS: Set<"items" | "additionalItems" | "additionalProperties" | "propertyNames" | "contains" | "if" | "then" | "else" | "not">;
export type SubSchemaKey = (typeof SUB_SCHEMAS)[number];
export declare const SCHEMA_KEYS: ("items" | "additionalItems" | "additionalProperties" | "propertyNames" | "contains" | "if" | "then" | "else" | "not" | "allOf" | "oneOf" | "anyOf" | "$defs" | "definitions" | "properties" | "patternProperties" | "dependencies")[];
export type SchemaKey = (typeof SCHEMA_KEYS)[number];
export declare function isSchema(schemaDef: SchemaDefinition): schemaDef is Schema;
export declare function isSchemaWithProperties(schema: Schema): schema is SchemaWithProperties;
export declare function isNormalArrayItems(items: Schema["items"]): items is Schema;
export declare function isSubSchemaKey(key: string): key is SubSchemaKey;
export declare function isSubSchemasArrayKey(key: string): key is SubSchemasArrayKey;
export declare function isSubSchemasRecordKey(key: string): key is SubSchemasRecordKey;
