import { isSchema, isSubSchemaKey, isSubSchemasArrayKey, isSubSchemasRecordKey, } from "./schema.js";
export function makeSchemaDefinitionTraverser(keys, visitor) {
    return function* traverse(schema, ctx = { type: "root", path: [] }) {
        if (visitor.onEnter) {
            yield* visitor.onEnter(schema, ctx);
        }
        if (isSchema(schema)) {
            const fakeKey = "";
            const subCtx = {
                type: "sub",
                parent: schema,
                key: fakeKey,
                // @ts-expect-error
                path: ctx.path.concat(fakeKey),
            };
            const arrayCtx = {
                type: "array",
                parent: schema,
                key: fakeKey,
                index: 0,
                // @ts-expect-error
                path: ctx.path.concat(fakeKey, 0),
            };
            const recordCtx = {
                type: "record",
                parent: schema,
                key: fakeKey,
                property: "",
                // @ts-expect-error
                path: ctx.path.concat(fakeKey, ""),
            };
            for (const key of keys) {
                if (isSubSchemaKey(key)) {
                    const value = schema[key];
                    if (value === undefined || Array.isArray(value)) {
                        continue;
                    }
                    subCtx.key = key;
                    subCtx.path[subCtx.path.length - 1] = key;
                    yield* traverse(value, subCtx);
                }
                if (isSubSchemasArrayKey(key)) {
                    const array = schema[key];
                    if (array === undefined || !Array.isArray(array)) {
                        continue;
                    }
                    arrayCtx.key = key;
                    arrayCtx.path[arrayCtx.path.length - 2] = key;
                    for (let index = 0; index < array.length; index++) {
                        arrayCtx.index = index;
                        arrayCtx.path[arrayCtx.path.length - 1] = index;
                        yield* traverse(array[index], arrayCtx);
                    }
                }
                if (isSubSchemasRecordKey(key)) {
                    const record = schema[key];
                    if (record === undefined) {
                        continue;
                    }
                    recordCtx.key = key;
                    recordCtx.path[recordCtx.path.length - 2] = key;
                    for (const property of Object.keys(record)) {
                        const value = record[property];
                        if (value === undefined || Array.isArray(value)) {
                            continue;
                        }
                        recordCtx.property = property;
                        recordCtx.path[recordCtx.path.length - 1] = property;
                        yield* traverse(value, recordCtx);
                    }
                }
            }
        }
        if (visitor.onLeave) {
            yield* visitor.onLeave(schema, ctx);
        }
    };
}
