import type { SchemaValue } from "./schema.js";
import type { Visitor } from "./traverser.js";
import type { Path } from "./path.js";
export type SchemaValueTraverserContextType = "root" | "array" | "record";
export interface AbstractSchemaValueTraverserContext<T extends SchemaValueTraverserContextType> {
    type: T;
    path: Path;
}
export interface RootSchemaValueTraverserContext extends AbstractSchemaValueTraverserContext<"root"> {
}
export interface ArraySchemaValueTraverserContext extends AbstractSchemaValueTraverserContext<"array"> {
    index: number;
}
export interface RecordSchemaValueTraverserContext extends AbstractSchemaValueTraverserContext<"record"> {
    key: string;
}
export type SchemaValueTraverserContext = RootSchemaValueTraverserContext | ArraySchemaValueTraverserContext | RecordSchemaValueTraverserContext;
export type SchemaValueVisitor<R> = Visitor<SchemaValue, SchemaValueTraverserContext, R>;
export declare function traverseSchemaValue<R>(value: SchemaValue, visitor: SchemaValueVisitor<R>, ctx?: SchemaValueTraverserContext): Generator<R>;
