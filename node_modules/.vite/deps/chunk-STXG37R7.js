import {
  buttonAttributes,
  composeProps,
  datalist_default,
  descriptionAttributes,
  disabledProp,
  errorsListAttributes,
  getComponent,
  getFormContext,
  helpAttributes,
  inputAttributes,
  labelAttributes,
  layoutAttributes,
  selectAttributes,
  titleAttributes,
  uiOptionNestedProps,
  uiOptionProps
} from "./chunk-TH67H3ZF.js";
import {
  isObject,
  isSchemaValueDeepEqual
} from "./chunk-L5BEN6GZ.js";
import {
  add_locations,
  append_styles,
  attribute_effect,
  bind_checked,
  bind_select_value,
  bind_value,
  check_target,
  cleanup_styles,
  component,
  each,
  hmr,
  if_block,
  index,
  legacy_api,
  prop,
  remove_input_defaults,
  snippet,
  validate_binding,
  validate_each_keys,
  wrap_snippet
} from "./chunk-C3TCUAZZ.js";
import {
  append,
  comment,
  from_html,
  set_text
} from "./chunk-4O4LVGQI.js";
import {
  FILENAME,
  HMR,
  child,
  first_child,
  get,
  noop,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  tag,
  template_effect,
  user_derived
} from "./chunk-YEGJDBKW.js";
import {
  __export
} from "./chunk-G3PMV62Z.js";

// node_modules/@sjsf/form/dist/templates/exports.js
var exports_exports = {};
__export(exports_exports, {
  arrayItemTemplate: () => array_item_template_default,
  arrayTemplate: () => array_template_default,
  fieldTemplate: () => field_template_default,
  multiFieldTemplate: () => multi_field_template_default,
  objectPropertyTemplate: () => object_property_template_default,
  objectTemplate: () => object_template_default
});

// node_modules/@sjsf/form/dist/templates/get-template-props.js
function getTemplateProps(uiOption, config) {
  return {
    title: config.title,
    showMeta: uiOption("hideTitle") !== true,
    description: uiOption("description") ?? config.schema.description
  };
}

// node_modules/@sjsf/form/dist/templates/field-template.svelte
Field_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/field-template.svelte";
var root_3 = add_locations(from_html(`<!> <!>`, 1), Field_template[FILENAME], []);
var root_1 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Field_template[FILENAME], []);
function Field_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Field_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  const TitleOrLabel = tag(user_derived(() => getComponent(ctx, $$props.uiOption("useLabel") ?? $$props.useLabel ? "label" : "title", $$props.config)), "TitleOrLabel");
  const Description2 = tag(user_derived(() => getComponent(ctx, "description", $$props.config)), "Description");
  const ErrorsList = tag(user_derived(() => getComponent(ctx, "errorsList", $$props.config)), "ErrorsList");
  const Help2 = tag(user_derived(() => getComponent(ctx, "help", $$props.config)), "Help");
  const $$d = tag(user_derived(() => getTemplateProps($$props.uiOption, $$props.config)), "[$derived iterable]"), title = tag(user_derived(() => get($$d).title), "title"), description = tag(user_derived(() => get($$d).description), "description"), showMeta = tag(user_derived(() => get($$d).showMeta), "showMeta");
  const help = tag(user_derived(() => $$props.uiOption("help")), "help");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "field",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Field_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_1();
        var node_1 = first_child(fragment_1);
        {
          var consequent_2 = ($$anchor4) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            component(node_2, () => get(Layout2), ($$anchor5, Layout_2) => {
              Layout_2($$anchor5, {
                type: "field-meta",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Field_template, ($$anchor6, $$slotProps2) => {
                  var fragment_3 = root_3();
                  var node_3 = first_child(fragment_3);
                  {
                    var consequent = ($$anchor7) => {
                      var fragment_4 = comment();
                      var node_4 = first_child(fragment_4);
                      component(node_4, () => get(TitleOrLabel), ($$anchor8, TitleOrLabel_1) => {
                        TitleOrLabel_1($$anchor8, {
                          type: "field",
                          get title() {
                            return get(title);
                          },
                          get config() {
                            return $$props.config;
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_4);
                    };
                    if_block(node_3, ($$render) => {
                      if ($$props.showTitle && get(title)) $$render(consequent);
                    });
                  }
                  var node_5 = sibling(node_3, 2);
                  {
                    var consequent_1 = ($$anchor7) => {
                      var fragment_5 = comment();
                      var node_6 = first_child(fragment_5);
                      component(node_6, () => get(Description2), ($$anchor8, Description_1) => {
                        Description_1($$anchor8, {
                          type: "field",
                          get description() {
                            return get(description);
                          },
                          get config() {
                            return $$props.config;
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_5);
                    };
                    if_block(node_5, ($$render) => {
                      if (get(description)) $$render(consequent_1);
                    });
                  }
                  append($$anchor6, fragment_3);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_2);
          };
          if_block(node_1, ($$render) => {
            if (get(showMeta) && ($$props.showTitle && get(title) || get(description))) $$render(consequent_2);
          });
        }
        var node_7 = sibling(node_1, 2);
        component(node_7, () => get(Layout2), ($$anchor4, Layout_3) => {
          Layout_3($$anchor4, {
            type: "field-content",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Field_template, ($$anchor5, $$slotProps2) => {
              var fragment_6 = comment();
              var node_8 = first_child(fragment_6);
              snippet(node_8, () => $$props.children);
              append($$anchor5, fragment_6);
            }),
            $$slots: { default: true }
          });
        });
        var node_9 = sibling(node_7, 2);
        {
          var consequent_3 = ($$anchor4) => {
            var fragment_7 = comment();
            var node_10 = first_child(fragment_7);
            component(node_10, () => get(ErrorsList), ($$anchor5, ErrorsList_1) => {
              ErrorsList_1($$anchor5, {
                get errors() {
                  return $$props.errors;
                },
                get config() {
                  return $$props.config;
                }
              });
            });
            append($$anchor4, fragment_7);
          };
          if_block(node_9, ($$render) => {
            if ($$props.errors.length > 0) $$render(consequent_3);
          });
        }
        var node_11 = sibling(node_9, 2);
        {
          var consequent_4 = ($$anchor4) => {
            var fragment_8 = comment();
            var node_12 = first_child(fragment_8);
            component(node_12, () => get(Help2), ($$anchor5, Help_1) => {
              Help_1($$anchor5, {
                get help() {
                  return get(help);
                },
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                }
              });
            });
            append($$anchor4, fragment_8);
          };
          if_block(node_11, ($$render) => {
            if (strict_equals(get(help), void 0, false)) $$render(consequent_4);
          });
        }
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Field_template = hmr(Field_template, () => Field_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Field_template[HMR].source;
    set(Field_template[HMR].source, module.default[HMR].original);
  });
}
var field_template_default = Field_template;

// node_modules/@sjsf/form/dist/templates/object-template.svelte
Object_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/object-template.svelte";
var root_32 = add_locations(from_html(`<!> <!>`, 1), Object_template[FILENAME], []);
var root_12 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Object_template[FILENAME], []);
function Object_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Object_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  const Title2 = tag(user_derived(() => getComponent(ctx, "title", $$props.config)), "Title");
  const Description2 = tag(user_derived(() => getComponent(ctx, "description", $$props.config)), "Description");
  const ErrorsList = tag(user_derived(() => getComponent(ctx, "errorsList", $$props.config)), "ErrorsList");
  const $$d = tag(user_derived(() => getTemplateProps($$props.uiOption, $$props.config)), "[$derived iterable]"), title = tag(user_derived(() => get($$d).title), "title"), description = tag(user_derived(() => get($$d).description), "description"), showMeta = tag(user_derived(() => get($$d).showMeta), "showMeta");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "object-field",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Object_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_12();
        var node_1 = first_child(fragment_1);
        {
          var consequent_2 = ($$anchor4) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            component(node_2, () => get(Layout2), ($$anchor5, Layout_2) => {
              Layout_2($$anchor5, {
                type: "object-field-meta",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Object_template, ($$anchor6, $$slotProps2) => {
                  var fragment_3 = root_32();
                  var node_3 = first_child(fragment_3);
                  {
                    var consequent = ($$anchor7) => {
                      var fragment_4 = comment();
                      var node_4 = first_child(fragment_4);
                      component(node_4, () => get(Title2), ($$anchor8, Title_1) => {
                        Title_1($$anchor8, {
                          type: "object",
                          get config() {
                            return $$props.config;
                          },
                          get title() {
                            return get(title);
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_4);
                    };
                    if_block(node_3, ($$render) => {
                      if (get(title)) $$render(consequent);
                    });
                  }
                  var node_5 = sibling(node_3, 2);
                  {
                    var consequent_1 = ($$anchor7) => {
                      var fragment_5 = comment();
                      var node_6 = first_child(fragment_5);
                      component(node_6, () => get(Description2), ($$anchor8, Description_1) => {
                        Description_1($$anchor8, {
                          type: "object",
                          get description() {
                            return get(description);
                          },
                          get config() {
                            return $$props.config;
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_5);
                    };
                    if_block(node_5, ($$render) => {
                      if (get(description)) $$render(consequent_1);
                    });
                  }
                  append($$anchor6, fragment_3);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_2);
          };
          if_block(node_1, ($$render) => {
            if (get(showMeta) && (get(title) || get(description))) $$render(consequent_2);
          });
        }
        var node_7 = sibling(node_1, 2);
        component(node_7, () => get(Layout2), ($$anchor4, Layout_3) => {
          Layout_3($$anchor4, {
            type: "object-properties",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Object_template, ($$anchor5, $$slotProps2) => {
              var fragment_6 = comment();
              var node_8 = first_child(fragment_6);
              snippet(node_8, () => $$props.children);
              append($$anchor5, fragment_6);
            }),
            $$slots: { default: true }
          });
        });
        var node_9 = sibling(node_7, 2);
        snippet(node_9, () => $$props.addButton ?? noop);
        var node_10 = sibling(node_9, 2);
        {
          var consequent_3 = ($$anchor4) => {
            var fragment_7 = comment();
            var node_11 = first_child(fragment_7);
            component(node_11, () => get(ErrorsList), ($$anchor5, ErrorsList_1) => {
              ErrorsList_1($$anchor5, {
                get errors() {
                  return $$props.errors;
                },
                get config() {
                  return $$props.config;
                }
              });
            });
            append($$anchor4, fragment_7);
          };
          if_block(node_10, ($$render) => {
            if ($$props.errors.length > 0) $$render(consequent_3);
          });
        }
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Object_template = hmr(Object_template, () => Object_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Object_template[HMR].source;
    set(Object_template[HMR].source, module.default[HMR].original);
  });
}
var object_template_default = Object_template;

// node_modules/@sjsf/form/dist/templates/object-property-template.svelte
Object_property_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/object-property-template.svelte";
var root_13 = add_locations(from_html(`<!> <!> <!>`, 1), Object_property_template[FILENAME], []);
function Object_property_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Object_property_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "object-property",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Object_property_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_13();
        var node_1 = first_child(fragment_1);
        {
          var consequent = ($$anchor4) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            component(node_2, () => get(Layout2), ($$anchor5, Layout_2) => {
              Layout_2($$anchor5, {
                type: "object-property-key-input",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Object_property_template, ($$anchor6, $$slotProps2) => {
                  var fragment_3 = comment();
                  var node_3 = first_child(fragment_3);
                  snippet(node_3, () => $$props.keyInput);
                  append($$anchor6, fragment_3);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_2);
          };
          if_block(node_1, ($$render) => {
            if ($$props.keyInput) $$render(consequent);
          });
        }
        var node_4 = sibling(node_1, 2);
        component(node_4, () => get(Layout2), ($$anchor4, Layout_3) => {
          Layout_3($$anchor4, {
            type: "object-property-content",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Object_property_template, ($$anchor5, $$slotProps2) => {
              var fragment_4 = comment();
              var node_5 = first_child(fragment_4);
              snippet(node_5, () => $$props.children);
              append($$anchor5, fragment_4);
            }),
            $$slots: { default: true }
          });
        });
        var node_6 = sibling(node_4, 2);
        {
          var consequent_1 = ($$anchor4) => {
            var fragment_5 = comment();
            var node_7 = first_child(fragment_5);
            component(node_7, () => get(Layout2), ($$anchor5, Layout_4) => {
              Layout_4($$anchor5, {
                type: "object-property-controls",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Object_property_template, ($$anchor6, $$slotProps2) => {
                  var fragment_6 = comment();
                  var node_8 = first_child(fragment_6);
                  snippet(node_8, () => $$props.removeButton);
                  append($$anchor6, fragment_6);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_5);
          };
          if_block(node_6, ($$render) => {
            if ($$props.removeButton) $$render(consequent_1);
          });
        }
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Object_property_template = hmr(Object_property_template, () => Object_property_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Object_property_template[HMR].source;
    set(Object_property_template[HMR].source, module.default[HMR].original);
  });
}
var object_property_template_default = Object_property_template;

// node_modules/@sjsf/form/dist/templates/array-template.svelte
Array_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/array-template.svelte";
var root_33 = add_locations(from_html(`<!> <!>`, 1), Array_template[FILENAME], []);
var root_14 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Array_template[FILENAME], []);
function Array_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Array_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  const Title2 = tag(user_derived(() => getComponent(ctx, "title", $$props.config)), "Title");
  const Description2 = tag(user_derived(() => getComponent(ctx, "description", $$props.config)), "Description");
  const ErrorsList = tag(user_derived(() => getComponent(ctx, "errorsList", $$props.config)), "ErrorsList");
  const $$d = tag(user_derived(() => getTemplateProps($$props.uiOption, $$props.config)), "[$derived iterable]"), title = tag(user_derived(() => get($$d).title), "title"), description = tag(user_derived(() => get($$d).description), "description"), showMeta = tag(user_derived(() => get($$d).showMeta), "showMeta");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "array-field",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Array_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_14();
        var node_1 = first_child(fragment_1);
        {
          var consequent_2 = ($$anchor4) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            component(node_2, () => get(Layout2), ($$anchor5, Layout_2) => {
              Layout_2($$anchor5, {
                type: "array-field-meta",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Array_template, ($$anchor6, $$slotProps2) => {
                  var fragment_3 = root_33();
                  var node_3 = first_child(fragment_3);
                  {
                    var consequent = ($$anchor7) => {
                      var fragment_4 = comment();
                      var node_4 = first_child(fragment_4);
                      component(node_4, () => get(Title2), ($$anchor8, Title_1) => {
                        Title_1($$anchor8, {
                          type: "array",
                          get title() {
                            return get(title);
                          },
                          get config() {
                            return $$props.config;
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_4);
                    };
                    if_block(node_3, ($$render) => {
                      if (get(title)) $$render(consequent);
                    });
                  }
                  var node_5 = sibling(node_3, 2);
                  {
                    var consequent_1 = ($$anchor7) => {
                      var fragment_5 = comment();
                      var node_6 = first_child(fragment_5);
                      component(node_6, () => get(Description2), ($$anchor8, Description_1) => {
                        Description_1($$anchor8, {
                          type: "array",
                          get description() {
                            return get(description);
                          },
                          get config() {
                            return $$props.config;
                          },
                          get errors() {
                            return $$props.errors;
                          }
                        });
                      });
                      append($$anchor7, fragment_5);
                    };
                    if_block(node_5, ($$render) => {
                      if (get(description)) $$render(consequent_1);
                    });
                  }
                  append($$anchor6, fragment_3);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_2);
          };
          if_block(node_1, ($$render) => {
            if (get(showMeta) && (get(title) || get(description))) $$render(consequent_2);
          });
        }
        var node_7 = sibling(node_1, 2);
        component(node_7, () => get(Layout2), ($$anchor4, Layout_3) => {
          Layout_3($$anchor4, {
            type: "array-items",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Array_template, ($$anchor5, $$slotProps2) => {
              var fragment_6 = comment();
              var node_8 = first_child(fragment_6);
              snippet(node_8, () => $$props.children);
              append($$anchor5, fragment_6);
            }),
            $$slots: { default: true }
          });
        });
        var node_9 = sibling(node_7, 2);
        snippet(node_9, () => $$props.addButton ?? noop);
        var node_10 = sibling(node_9, 2);
        {
          var consequent_3 = ($$anchor4) => {
            var fragment_7 = comment();
            var node_11 = first_child(fragment_7);
            component(node_11, () => get(ErrorsList), ($$anchor5, ErrorsList_1) => {
              ErrorsList_1($$anchor5, {
                get errors() {
                  return $$props.errors;
                },
                get config() {
                  return $$props.config;
                }
              });
            });
            append($$anchor4, fragment_7);
          };
          if_block(node_10, ($$render) => {
            if ($$props.errors.length > 0) $$render(consequent_3);
          });
        }
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Array_template = hmr(Array_template, () => Array_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Array_template[HMR].source;
    set(Array_template[HMR].source, module.default[HMR].original);
  });
}
var array_template_default = Array_template;

// node_modules/@sjsf/form/dist/templates/array-item-template.svelte
Array_item_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/array-item-template.svelte";
var root_15 = add_locations(from_html(`<!> <!>`, 1), Array_item_template[FILENAME], []);
function Array_item_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Array_item_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "array-item",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Array_item_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_15();
        var node_1 = first_child(fragment_1);
        component(node_1, () => get(Layout2), ($$anchor4, Layout_2) => {
          Layout_2($$anchor4, {
            type: "array-item-content",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Array_item_template, ($$anchor5, $$slotProps2) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              snippet(node_2, () => $$props.children);
              append($$anchor5, fragment_2);
            }),
            $$slots: { default: true }
          });
        });
        var node_3 = sibling(node_1, 2);
        {
          var consequent = ($$anchor4) => {
            var fragment_3 = comment();
            var node_4 = first_child(fragment_3);
            component(node_4, () => get(Layout2), ($$anchor5, Layout_3) => {
              Layout_3($$anchor5, {
                type: "array-item-controls",
                get config() {
                  return $$props.config;
                },
                get errors() {
                  return $$props.errors;
                },
                children: wrap_snippet(Array_item_template, ($$anchor6, $$slotProps2) => {
                  var fragment_4 = comment();
                  var node_5 = first_child(fragment_4);
                  snippet(node_5, () => $$props.buttons);
                  append($$anchor6, fragment_4);
                }),
                $$slots: { default: true }
              });
            });
            append($$anchor4, fragment_3);
          };
          if_block(node_3, ($$render) => {
            if ($$props.buttons) $$render(consequent);
          });
        }
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Array_item_template = hmr(Array_item_template, () => Array_item_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Array_item_template[HMR].source;
    set(Array_item_template[HMR].source, module.default[HMR].original);
  });
}
var array_item_template_default = Array_item_template;

// node_modules/@sjsf/form/dist/templates/multi-field-template.svelte
Multi_field_template[FILENAME] = "node_modules/@sjsf/form/dist/templates/multi-field-template.svelte";
var root_16 = add_locations(from_html(`<!> <!>`, 1), Multi_field_template[FILENAME], []);
function Multi_field_template($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Multi_field_template);
  const ctx = getFormContext();
  const Layout2 = tag(user_derived(() => getComponent(ctx, "layout", $$props.config)), "Layout");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Layout2), ($$anchor2, Layout_1) => {
    Layout_1($$anchor2, {
      type: "multi-field",
      get config() {
        return $$props.config;
      },
      get errors() {
        return $$props.errors;
      },
      children: wrap_snippet(Multi_field_template, ($$anchor3, $$slotProps) => {
        var fragment_1 = root_16();
        var node_1 = first_child(fragment_1);
        component(node_1, () => get(Layout2), ($$anchor4, Layout_2) => {
          Layout_2($$anchor4, {
            type: "multi-field-controls",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Multi_field_template, ($$anchor5, $$slotProps2) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              snippet(node_2, () => $$props.optionSelector);
              append($$anchor5, fragment_2);
            }),
            $$slots: { default: true }
          });
        });
        var node_3 = sibling(node_1, 2);
        component(node_3, () => get(Layout2), ($$anchor4, Layout_3) => {
          Layout_3($$anchor4, {
            type: "multi-field-content",
            get config() {
              return $$props.config;
            },
            get errors() {
              return $$props.errors;
            },
            children: wrap_snippet(Multi_field_template, ($$anchor5, $$slotProps2) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              snippet(node_4, () => $$props.children);
              append($$anchor5, fragment_3);
            }),
            $$slots: { default: true }
          });
        });
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Multi_field_template = hmr(Multi_field_template, () => Multi_field_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Multi_field_template[HMR].source;
    set(Multi_field_template[HMR].source, module.default[HMR].original);
  });
}
var multi_field_template_default = Multi_field_template;

// node_modules/@sjsf/basic-theme/dist/components/submit-button.svelte
Submit_button[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/submit-button.svelte";
var root = add_locations(from_html(`<button><!></button>`), Submit_button[FILENAME], [[23, 0]]);
function Submit_button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Submit_button);
  const ctx = getFormContext();
  var button = root();
  attribute_effect(button, ($0) => ({ ...$0 }), [
    () => buttonAttributes(ctx, $$props.config, "submitButton", "submit", { style: "width: 100%; padding: 0.5rem;" })
  ]);
  var node = child(button);
  snippet(node, () => $$props.children);
  reset(button);
  append($$anchor, button);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Submit_button = hmr(Submit_button, () => Submit_button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Submit_button[HMR].source;
    set(Submit_button[HMR].source, module.default[HMR].original);
  });
}
var submit_button_default = Submit_button;

// node_modules/@sjsf/basic-theme/dist/components/button.svelte
Button[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/button.svelte";
var root2 = add_locations(from_html(`<button><!></button>`), Button[FILENAME], [[54, 0]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Button);
  const ctx = getFormContext();
  function getStyle(type) {
    switch (type) {
      case "object-property-add":
      case "array-item-add":
        return "width: 100%; padding: 0.25rem";
      default:
        return void 0;
    }
  }
  var button = root2();
  attribute_effect(button, ($0) => ({ ...$0 }), [
    () => composeProps(
      ctx,
      $$props.config,
      {
        disabled: $$props.disabled,
        type: "button",
        style: getStyle($$props.type),
        onclick: $$props.onclick
      },
      uiOptionProps("button"),
      uiOptionNestedProps("buttons", (p) => p[$$props.type]),
      disabledProp
    )
  ]);
  var node = child(button);
  snippet(node, () => $$props.children);
  reset(button);
  append($$anchor, button);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var button_default = Button;

// node_modules/@sjsf/basic-theme/dist/components/layout.svelte
Layout[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/layout.svelte";
var root_17 = add_locations(from_html(`<div><!></div>`), Layout[FILENAME], [[76, 2]]);
var $$css = {
  hash: "s-JQBSU21o8YI6",
  code: '\n  [data-layout="object-property"].s-JQBSU21o8YI6 {\n    grid-template-columns: 1fr;\n  }\n  [data-layout="object-property"]:has(> :nth-child(2)) {\n    grid-template-columns: 1fr 1fr auto;\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LnN2ZWx0ZSIsIm1hcHBpbmdzIjoiIiwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJsYXlvdXQuc3ZlbHRlIl19 */'
};
function Layout($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Layout);
  append_styles($$anchor, $$css);
  function getStyle(type) {
    switch (type) {
      case "object-property":
        return "display: grid; grid-template-rows: 1fr; align-items: start; column-gap: 0.2rem;";
      case "array-item":
      case "array-item-controls":
        return "display: flex; gap: 0.2rem; align-items: start;";
      case "array-item-content":
        return "flex-grow: 1;";
      case "field-content":
        return "display: flex; gap: 0.5rem; flex-wrap: wrap;";
      case "array-items":
      case "object-properties":
      case "array-field":
      case "object-field":
      case "multi-field":
        return "display: flex; flex-direction: column; gap: 1rem;";
      case "field":
        return "display: flex; flex-direction: column; gap: 0.2rem;";
      case "field-meta":
        return "display: block;";
      case "object-property-key-input":
      case "object-property-content":
        return "flex-grow: 1;";
      case "object-field-meta":
      case "array-field-meta":
        return "padding-bottom: 0;";
      default:
        return void 0;
    }
  }
  const style = tag(user_derived(() => getStyle($$props.type)), "style");
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => layoutAttributes(ctx, $$props.config, "layout", "layouts", $$props.type, {})), "attributes");
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_17();
      attribute_effect(
        div,
        () => ({
          style: get(style),
          ...get(attributes)
        }),
        void 0,
        "s-JQBSU21o8YI6"
      );
      var node_1 = child(div);
      snippet(node_1, () => $$props.children);
      reset(div);
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      snippet(node_2, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (get(style) || Object.keys(get(attributes)).length > 1) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout = hmr(Layout, () => Layout[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-JQBSU21o8YI6");
    module.default[HMR].source = Layout[HMR].source;
    set(Layout[HMR].source, module.default[HMR].original);
  });
}
var layout_default = Layout;

// node_modules/@sjsf/basic-theme/dist/components/title.svelte
Title[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/title.svelte";
var root3 = add_locations(from_html(`<legend> </legend>`), Title[FILENAME], [[26, 0]]);
function Title($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Title);
  const ctx = getFormContext();
  var legend = root3();
  attribute_effect(legend, ($0) => ({ ...$0 }), [
    () => titleAttributes(ctx, $$props.config, "titleAttributes", {
      style: `font-weight: bold; font-size: ${strict_equals($$props.type, "field") ? "unset" : "larger"};`
    })
  ]);
  var text = child(legend, true);
  reset(legend);
  template_effect(() => set_text(text, $$props.title));
  append($$anchor, legend);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Title = hmr(Title, () => Title[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Title[HMR].source;
    set(Title[HMR].source, module.default[HMR].original);
  });
}
var title_default = Title;

// node_modules/@sjsf/basic-theme/dist/components/label.svelte
Label[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/label.svelte";
var root_18 = add_locations(from_html(`<span>*</span>`), Label[FILENAME], [[33, 4]]);
var root4 = add_locations(from_html(`<label> <!></label>`), Label[FILENAME], [[26, 0]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label);
  const ctx = getFormContext();
  var label = root4();
  attribute_effect(label, ($0) => ({ ...$0 }), [
    () => labelAttributes(ctx, $$props.config, "labelAttributes", { style: "font-weight: bold;" })
  ]);
  var text = child(label);
  var node = sibling(text);
  {
    var consequent = ($$anchor2) => {
      var span = root_18();
      append($$anchor2, span);
    };
    if_block(node, ($$render) => {
      if ($$props.config.required) $$render(consequent);
    });
  }
  reset(label);
  template_effect(() => set_text(text, `${$$props.title ?? ""} `));
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var label_default = Label;

// node_modules/@sjsf/basic-theme/dist/components/description.svelte
Description[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/description.svelte";
var root5 = add_locations(from_html(`<div> </div>`), Description[FILENAME], [[26, 0]]);
function Description($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Description);
  const ctx = getFormContext();
  var div = root5();
  attribute_effect(div, ($0) => ({ ...$0 }), [
    () => descriptionAttributes(ctx, $$props.config, "descriptionAttributes", { style: "font-weight: 300;" })
  ]);
  var text = child(div, true);
  reset(div);
  template_effect(() => set_text(text, $$props.description));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Description = hmr(Description, () => Description[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Description[HMR].source;
    set(Description[HMR].source, module.default[HMR].original);
  });
}
var description_default = Description;

// node_modules/@sjsf/basic-theme/dist/components/help.svelte
Help[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/help.svelte";
var root6 = add_locations(from_html(`<div> </div>`), Help[FILENAME], [[26, 0]]);
function Help($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Help);
  const ctx = getFormContext();
  var div = root6();
  attribute_effect(div, ($0) => ({ ...$0 }), [
    () => helpAttributes(ctx, $$props.config, "helpAttributes", { style: "font-weight: 300;" })
  ]);
  var text = child(div, true);
  reset(div);
  template_effect(() => set_text(text, $$props.help));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Help = hmr(Help, () => Help[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Help[HMR].source;
    set(Help[HMR].source, module.default[HMR].original);
  });
}
var help_default = Help;

// node_modules/@sjsf/basic-theme/dist/components/errors-list.svelte
Errors_list[FILENAME] = "node_modules/@sjsf/basic-theme/dist/components/errors-list.svelte";
var root_19 = add_locations(from_html(`<li> </li>`), Errors_list[FILENAME], [[32, 4]]);
var root7 = add_locations(from_html(`<ul></ul>`), Errors_list[FILENAME], [[26, 0]]);
function Errors_list($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Errors_list);
  const ctx = getFormContext();
  var ul = root7();
  attribute_effect(ul, ($0) => ({ ...$0 }), [
    () => errorsListAttributes(ctx, $$props.config, "errorsList", {
      style: "color: red; list-style-position: inside; padding: 0; margin: 0;"
    })
  ]);
  each(ul, 21, () => $$props.errors, index, ($$anchor2, err) => {
    var li = root_19();
    var text = child(li, true);
    reset(li);
    template_effect(() => set_text(text, get(err).message));
    append($$anchor2, li);
  });
  reset(ul);
  append($$anchor, ul);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Errors_list = hmr(Errors_list, () => Errors_list[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Errors_list[HMR].source;
    set(Errors_list[HMR].source, module.default[HMR].original);
  });
}
var errors_list_default = Errors_list;

// node_modules/@sjsf/basic-theme/dist/widgets/text.svelte
Text[FILENAME] = "node_modules/@sjsf/basic-theme/dist/widgets/text.svelte";
var root8 = add_locations(from_html(`<input/> <!>`, 1), Text[FILENAME], [[35, 0]]);
function Text($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Text);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => inputAttributes(ctx, $$props.config, "text", $$props.handlers, { style: "flex-grow: 1", type: "text" })), "attributes");
  var fragment = root8();
  var input = first_child(fragment);
  remove_input_defaults(input);
  attribute_effect(input, () => ({ ...get(attributes) }));
  var node = sibling(input, 2);
  datalist_default(node, {
    get id() {
      return get(attributes).list;
    },
    get config() {
      return $$props.config;
    }
  });
  bind_value(input, value);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text = hmr(Text, () => Text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text[HMR].source;
    set(Text[HMR].source, module.default[HMR].original);
  });
}
var text_default = Text;

// node_modules/@sjsf/basic-theme/dist/widgets/number.svelte
Number2[FILENAME] = "node_modules/@sjsf/basic-theme/dist/widgets/number.svelte";
var root9 = add_locations(from_html(`<input/> <!>`, 1), Number2[FILENAME], [[35, 0]]);
function Number2($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Number2);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => inputAttributes(ctx, $$props.config, "number", $$props.handlers, { type: "number", style: "flex-grow: 1" })), "attributes");
  var fragment = root9();
  var input = first_child(fragment);
  remove_input_defaults(input);
  attribute_effect(input, () => ({ ...get(attributes) }));
  var node = sibling(input, 2);
  datalist_default(node, {
    get id() {
      return get(attributes).list;
    },
    get config() {
      return $$props.config;
    }
  });
  bind_value(input, () => value() ?? null, (v) => value(v ?? void 0));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Number2 = hmr(Number2, () => Number2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Number2[HMR].source;
    set(Number2[HMR].source, module.default[HMR].original);
  });
}
var number_default = Number2;

// node_modules/@sjsf/form/dist/options.svelte.js
function indexMapper(options) {
  const map = new Map(options.map((option, index2) => [option.value, index2]));
  return {
    fromValue(value) {
      if (strict_equals(value, void 0)) {
        return -1;
      }
      const index2 = map.get(value);
      if (strict_equals(index2, void 0, false)) {
        return index2;
      }
      if (!isObject(value)) {
        return options.findIndex((option) => strict_equals(option.value, value));
      }
      return options.findIndex((option) => isSchemaValueDeepEqual(option.value, value));
    },
    toValue(index2) {
      return options[index2]?.value;
    }
  };
}
function singleOption({ mapper, value, update }) {
  const $$d = tag(user_derived(mapper), "[$derived iterable]"), fromValue = tag(user_derived(() => get($$d).fromValue), "fromValue"), toValue = tag(user_derived(() => get($$d).toValue), "toValue");
  const val = tag(user_derived(() => get(fromValue)(value())), "val");
  return {
    get value() {
      return get(val);
    },
    set value(v) {
      update(get(toValue)(v));
    }
  };
}

// node_modules/@sjsf/basic-theme/dist/widgets/select.svelte
Select[FILENAME] = "node_modules/@sjsf/basic-theme/dist/widgets/select.svelte";
var root_110 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[45, 4]]);
var root_2 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[48, 4]]);
var root10 = add_locations(from_html(`<select><!><!></select>`), Select[FILENAME], [[43, 0]]);
function Select($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Select);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => selectAttributes(ctx, $$props.config, "select", $$props.handlers, { style: "flex-grow: 1" })), "attributes");
  const mapped = tag(
    user_derived(() => singleOption({
      mapper: () => indexMapper($$props.options),
      value: () => value(),
      update: (v) => value(v)
    })),
    "mapped"
  );
  var select = root10();
  attribute_effect(select, () => ({ ...get(attributes) }));
  var node = child(select);
  {
    var consequent = ($$anchor2) => {
      var option_1 = root_110();
      option_1.value = option_1.__value = -1;
      var text = child(option_1, true);
      reset(option_1);
      template_effect(() => set_text(text, get(attributes).placeholder));
      append($$anchor2, option_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.config.schema.default, void 0)) $$render(consequent);
    });
  }
  var node_1 = sibling(node);
  validate_each_keys(() => $$props.options, (option) => option.id);
  each(node_1, 19, () => $$props.options, (option) => option.id, ($$anchor2, option, index2) => {
    var option_2 = root_2();
    var option_2_value = {};
    var text_1 = child(option_2, true);
    reset(option_2);
    template_effect(() => {
      if (option_2_value !== (option_2_value = get(index2))) {
        option_2.value = (option_2.__value = get(index2)) ?? "";
      }
      option_2.disabled = get(option).disabled;
      set_text(text_1, get(option).label);
    });
    append($$anchor2, option_2);
  });
  reset(select);
  validate_binding("bind:value={mapped.value}", () => get(mapped), () => "value", 43, 8);
  bind_select_value(select, () => get(mapped).value, ($$value) => get(mapped).value = $$value);
  append($$anchor, select);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var select_default = Select;

// node_modules/@sjsf/basic-theme/dist/widgets/checkbox.svelte
Checkbox[FILENAME] = "node_modules/@sjsf/basic-theme/dist/widgets/checkbox.svelte";
var root11 = add_locations(from_html(`<label><input/> </label>`), Checkbox[FILENAME], [[31, 0, [[32, 2]]]]);
function Checkbox($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Checkbox);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => inputAttributes(ctx, $$props.config, "checkbox", $$props.handlers, { type: "checkbox" })), "attributes");
  var label = root11();
  var input = child(label);
  remove_input_defaults(input);
  attribute_effect(input, () => ({ type: "checkbox", ...get(attributes) }));
  var text = sibling(input);
  reset(label);
  template_effect(() => set_text(text, ` ${$$props.config.title ?? ""}`));
  bind_checked(input, () => value() ?? false, (v) => value(v));
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Checkbox = hmr(Checkbox, () => Checkbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Checkbox[HMR].source;
    set(Checkbox[HMR].source, module.default[HMR].original);
  });
}
var checkbox_default = Checkbox;

export {
  exports_exports,
  submit_button_default,
  button_default,
  layout_default,
  title_default,
  label_default,
  description_default,
  help_default,
  errors_list_default,
  text_default,
  number_default,
  indexMapper,
  singleOption,
  select_default,
  checkbox_default
};
//# sourceMappingURL=chunk-STXG37R7.js.map
