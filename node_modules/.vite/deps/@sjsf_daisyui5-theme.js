import {
  form_default
} from "./chunk-YUZGVINX.js";
import {
  exports_exports,
  indexMapper,
  singleOption
} from "./chunk-STXG37R7.js";
import "./chunk-ARULWGQ3.js";
import {
  definitions
} from "./chunk-AKJG6NNY.js";
import {
  buttonAttributes,
  composeProps,
  datalist_default,
  descriptionAttributes,
  disabledProp,
  errorsListAttributes,
  getFormContext,
  helpAttributes,
  inputAttributes,
  labelAttributes,
  layoutAttributes,
  selectAttributes,
  titleAttributes,
  uiOptionNestedProps,
  uiOptionProps
} from "./chunk-TH67H3ZF.js";
import {
  extendByRecord,
  fromRecord
} from "./chunk-4CFPDER2.js";
import "./chunk-L5BEN6GZ.js";
import "./chunk-3I4LE53J.js";
import "./chunk-QKPL34R6.js";
import "./chunk-NMJMEXLF.js";
import "./chunk-7RQDXF5S.js";
import {
  add_locations,
  attribute_effect,
  bind_checked,
  bind_select_value,
  bind_value,
  check_target,
  each,
  hmr,
  if_block,
  index,
  legacy_api,
  prop,
  remove_input_defaults,
  snippet,
  validate_binding,
  validate_each_keys
} from "./chunk-C3TCUAZZ.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  set_text,
  text
} from "./chunk-4O4LVGQI.js";
import {
  FILENAME,
  HMR,
  child,
  first_child,
  get,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  tag,
  template_effect,
  user_derived
} from "./chunk-YEGJDBKW.js";
import "./chunk-NXGWPDOQ.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-TXI4FRAY.js";
import "./chunk-RVAV4ZRS.js";
import {
  __export
} from "./chunk-G3PMV62Z.js";

// node_modules/@sjsf/form/dist/fields/resolver/index.js
var fields = fromRecord(definitions);

// node_modules/@sjsf/daisyui5-theme/dist/components/exports.js
var exports_exports2 = {};
__export(exports_exports2, {
  button: () => button_default,
  description: () => description_default,
  errorsList: () => errors_list_default,
  form: () => form_default,
  help: () => help_default,
  label: () => label_default,
  layout: () => layout_default,
  submitButton: () => submit_button_default,
  title: () => title_default
});

// node_modules/@sjsf/daisyui5-theme/dist/components/button.svelte
Button[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/button.svelte";
var root = add_locations(from_html(`<button><!></button>`), Button[FILENAME], [[18, 0]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Button);
  const ctx = getFormContext();
  var button = root();
  attribute_effect(button, ($0) => ({ class: "btn join-item btn-sm", ...$0 }), [
    () => composeProps(
      ctx,
      $$props.config,
      {
        type: "button",
        onclick: $$props.onclick,
        disabled: $$props.disabled
      },
      uiOptionProps("button"),
      uiOptionNestedProps("buttons", (b) => b[$$props.type]),
      disabledProp
    )
  ]);
  var node = child(button);
  snippet(node, () => $$props.children);
  reset(button);
  append($$anchor, button);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var button_default = Button;

// node_modules/@sjsf/daisyui5-theme/dist/components/layout.svelte
Layout[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/layout.svelte";
var root_3 = add_locations(from_html(`<fieldset><!></fieldset>`), Layout[FILENAME], [[41, 1]]);
var root_4 = add_locations(from_html(`<div><!></div>`), Layout[FILENAME], [[46, 1]]);
function Layout($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Layout);
  const isItem = tag(user_derived(() => strict_equals($$props.type, "array-item")), "isItem");
  const isProperty = tag(user_derived(() => strict_equals($$props.type, "object-property")), "isProperty");
  const isControls = tag(user_derived(() => strict_equals($$props.type, "array-item-controls")), "isControls");
  const isColumn = tag(user_derived(() => strict_equals($$props.type, "array-items") || strict_equals($$props.type, "object-properties") || strict_equals($$props.type, "multi-field")), "isColumn");
  const ctx = getFormContext();
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var fieldset = root_3();
          const attributes = user_derived(() => layoutAttributes(ctx, $$props.config, "daisyui5FieldsLayout", "daisyui5FieldsLayouts", $$props.type, {}));
          get(attributes);
          attribute_effect(fieldset, () => ({
            class: "fieldset gap-y-2",
            ...get(attributes)
          }));
          var node_2 = child(fieldset);
          snippet(node_2, () => $$props.children);
          reset(fieldset);
          append($$anchor3, fieldset);
        };
        var alternate_1 = ($$anchor3) => {
          var div = root_4();
          const attributes = user_derived(() => layoutAttributes(ctx, $$props.config, "layout", "layouts", $$props.type, {}));
          get(attributes);
          attribute_effect(div, () => ({
            class: {
              flex: get(isItem) || get(isControls) || get(isColumn) || strict_equals($$props.type, "multi-field-controls"),
              "gap-2": get(isItem) || get(isColumn),
              "items-start": get(isItem) || get(isControls),
              join: get(isControls),
              grow: strict_equals($$props.type, "array-item-content") || strict_equals($$props.type, "object-property-key-input") || strict_equals($$props.type, "object-property-content"),
              "flex-col": get(isColumn),
              "grid [&:has(>:nth-child(2))]:grid-cols-[1fr_1fr_auto] grid-cols-1 grid-rows-[1fr] items-start gap-x-2": get(isProperty)
            },
            ...get(attributes)
          }));
          var node_3 = child(div);
          snippet(node_3, () => $$props.children);
          reset(div);
          append($$anchor3, div);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if (strict_equals($$props.type, "field") || strict_equals($$props.type, "array-field") || strict_equals($$props.type, "object-field")) $$render(consequent_1);
            else $$render(alternate_1, false);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.type, "field-meta") || strict_equals($$props.type, "field-content") || strict_equals($$props.type, "array-field-meta") || strict_equals($$props.type, "object-field-meta")) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout = hmr(Layout, () => Layout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout[HMR].source;
    set(Layout[HMR].source, module.default[HMR].original);
  });
}
var layout_default = Layout;

// node_modules/@sjsf/daisyui5-theme/dist/components/title.svelte
Title[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/title.svelte";
var root2 = add_locations(from_html(`<legend> </legend>`), Title[FILENAME], [[10, 0]]);
function Title($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Title);
  const ctx = getFormContext();
  var legend = root2();
  attribute_effect(
    legend,
    ($0) => ({
      class: [
        "fieldset-legend",
        {
          "text-base": strict_equals($$props.type, "field", false)
        }
      ],
      ...$0
    }),
    [
      () => titleAttributes(ctx, $$props.config, "titleAttributes", {})
    ]
  );
  var text2 = child(legend, true);
  reset(legend);
  template_effect(() => set_text(text2, $$props.title));
  append($$anchor, legend);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Title = hmr(Title, () => Title[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Title[HMR].source;
    set(Title[HMR].source, module.default[HMR].original);
  });
}
var title_default = Title;

// node_modules/@sjsf/daisyui5-theme/dist/components/label.svelte
Label[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/label.svelte";
var root3 = add_locations(from_html(`<label> <!></label>`), Label[FILENAME], [[10, 0]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label);
  const ctx = getFormContext();
  var label = root3();
  attribute_effect(label, ($0) => ({ class: "fieldset-legend", ...$0 }), [
    () => labelAttributes(ctx, $$props.config, "labelAttributes", {})
  ]);
  var text2 = child(label);
  var node = sibling(text2);
  {
    var consequent = ($$anchor2) => {
      var text_1 = text("*");
      append($$anchor2, text_1);
    };
    if_block(node, ($$render) => {
      if ($$props.config.required) $$render(consequent);
    });
  }
  reset(label);
  template_effect(() => set_text(text2, `${$$props.title ?? ""} `));
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var label_default = Label;

// node_modules/@sjsf/daisyui5-theme/dist/components/description.svelte
Description[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/description.svelte";
var root4 = add_locations(from_html(`<p> </p>`), Description[FILENAME], [[10, 0]]);
function Description($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Description);
  const ctx = getFormContext();
  var p = root4();
  attribute_effect(p, ($0) => ({ class: "fieldset-label", ...$0 }), [
    () => descriptionAttributes(ctx, $$props.config, "descriptionAttributes", {})
  ]);
  var text2 = child(p, true);
  reset(p);
  template_effect(() => set_text(text2, $$props.description));
  append($$anchor, p);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Description = hmr(Description, () => Description[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Description[HMR].source;
    set(Description[HMR].source, module.default[HMR].original);
  });
}
var description_default = Description;

// node_modules/@sjsf/daisyui5-theme/dist/components/help.svelte
Help[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/help.svelte";
var root5 = add_locations(from_html(`<p> </p>`), Help[FILENAME], [[10, 0]]);
function Help($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Help);
  const ctx = getFormContext();
  var p = root5();
  attribute_effect(p, ($0) => ({ class: "fieldset-label", ...$0 }), [
    () => helpAttributes(ctx, $$props.config, "helpAttributes", {})
  ]);
  var text2 = child(p, true);
  reset(p);
  template_effect(() => set_text(text2, $$props.help));
  append($$anchor, p);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Help = hmr(Help, () => Help[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Help[HMR].source;
    set(Help[HMR].source, module.default[HMR].original);
  });
}
var help_default = Help;

// node_modules/@sjsf/daisyui5-theme/dist/components/errors-list.svelte
Errors_list[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/errors-list.svelte";
var root_1 = add_locations(from_html(`<li> </li>`), Errors_list[FILENAME], [[15, 2]]);
var root6 = add_locations(from_html(`<ul></ul>`), Errors_list[FILENAME], [[10, 0]]);
function Errors_list($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Errors_list);
  const ctx = getFormContext();
  var ul = root6();
  attribute_effect(
    ul,
    ($0) => ({
      class: "text-error list-disc list-inside",
      ...$0
    }),
    [
      () => errorsListAttributes(ctx, $$props.config, "errorsList", {})
    ]
  );
  each(ul, 21, () => $$props.errors, index, ($$anchor2, err) => {
    var li = root_1();
    var text2 = child(li, true);
    reset(li);
    template_effect(() => set_text(text2, get(err).message));
    append($$anchor2, li);
  });
  reset(ul);
  append($$anchor, ul);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Errors_list = hmr(Errors_list, () => Errors_list[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Errors_list[HMR].source;
    set(Errors_list[HMR].source, module.default[HMR].original);
  });
}
var errors_list_default = Errors_list;

// node_modules/@sjsf/daisyui5-theme/dist/components/submit-button.svelte
Submit_button[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/components/submit-button.svelte";
var root7 = add_locations(from_html(`<button><!></button>`), Submit_button[FILENAME], [[10, 0]]);
function Submit_button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Submit_button);
  const ctx = getFormContext();
  var button = root7();
  attribute_effect(button, ($0) => ({ class: "btn btn-primary w-full", ...$0 }), [
    () => buttonAttributes(ctx, $$props.config, "submitButton", "submit", {})
  ]);
  var node = child(button);
  snippet(node, () => $$props.children);
  reset(button);
  append($$anchor, button);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Submit_button = hmr(Submit_button, () => Submit_button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Submit_button[HMR].source;
    set(Submit_button[HMR].source, module.default[HMR].original);
  });
}
var submit_button_default = Submit_button;

// node_modules/@sjsf/daisyui5-theme/dist/widgets/exports.js
var exports_exports3 = {};
__export(exports_exports3, {
  checkboxWidget: () => checkbox_default,
  numberWidget: () => number_default,
  selectWidget: () => select_default,
  textWidget: () => text_default
});

// node_modules/@sjsf/daisyui5-theme/dist/widgets/text.svelte
Text[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/widgets/text.svelte";
var root8 = add_locations(from_html(`<input/> <!>`, 1), Text[FILENAME], [[12, 0]]);
function Text($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Text);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => inputAttributes(ctx, $$props.config, "text", $$props.handlers, { type: "text" })), "attributes");
  var fragment = root8();
  var input = first_child(fragment);
  remove_input_defaults(input);
  attribute_effect(input, () => ({
    class: [
      "input input-bordered w-full",
      $$props.errors.length > 0 && "input-error"
    ],
    ...get(attributes)
  }));
  var node = sibling(input, 2);
  datalist_default(node, {
    get id() {
      return get(attributes).list;
    },
    get config() {
      return $$props.config;
    }
  });
  bind_value(input, value);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text = hmr(Text, () => Text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text[HMR].source;
    set(Text[HMR].source, module.default[HMR].original);
  });
}
var text_default = Text;

// node_modules/@sjsf/daisyui5-theme/dist/widgets/number.svelte
Number[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/widgets/number.svelte";
var root9 = add_locations(from_html(`<input/> <!>`, 1), Number[FILENAME], [[12, 0]]);
function Number($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Number);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => inputAttributes(ctx, $$props.config, "number", $$props.handlers, { type: "number" })), "attributes");
  var fragment = root9();
  var input = first_child(fragment);
  remove_input_defaults(input);
  attribute_effect(input, () => ({
    class: [
      "w-full input input-bordered",
      $$props.errors.length > 0 && "input-error"
    ],
    ...get(attributes)
  }));
  var node = sibling(input, 2);
  datalist_default(node, {
    get id() {
      return get(attributes).list;
    },
    get config() {
      return $$props.config;
    }
  });
  bind_value(input, () => value() ?? null, (v) => value(v ?? void 0));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Number = hmr(Number, () => Number[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Number[HMR].source;
    set(Number[HMR].source, module.default[HMR].original);
  });
}
var number_default = Number;

// node_modules/@sjsf/daisyui5-theme/dist/widgets/select.svelte
Select[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/widgets/select.svelte";
var root_12 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[33, 2]]);
var root_2 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[36, 2]]);
var root10 = add_locations(from_html(`<select><!><!></select>`), Select[FILENAME], [[27, 0]]);
function Select($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Select);
  let value = prop($$props, "value", 15);
  const mapped = tag(
    user_derived(() => singleOption({
      mapper: () => indexMapper($$props.options),
      value: () => value(),
      update: (v) => value(v)
    })),
    "mapped"
  );
  const ctx = getFormContext();
  const attributes = tag(user_derived(() => selectAttributes(ctx, $$props.config, "select", $$props.handlers, {})), "attributes");
  var select = root10();
  attribute_effect(select, () => ({
    class: [
      "select select-bordered w-full",
      $$props.errors.length > 0 && "select-error"
    ],
    ...get(attributes)
  }));
  var node = child(select);
  {
    var consequent = ($$anchor2) => {
      var option_1 = root_12();
      option_1.value = option_1.__value = -1;
      var text2 = child(option_1, true);
      reset(option_1);
      template_effect(() => set_text(text2, get(attributes).placeholder));
      append($$anchor2, option_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.config.schema.default, void 0)) $$render(consequent);
    });
  }
  var node_1 = sibling(node);
  validate_each_keys(() => $$props.options, (option) => option.id);
  each(node_1, 19, () => $$props.options, (option) => option.id, ($$anchor2, option, index2) => {
    var option_2 = root_2();
    var option_2_value = {};
    var text_1 = child(option_2, true);
    reset(option_2);
    template_effect(() => {
      if (option_2_value !== (option_2_value = get(index2))) {
        option_2.value = (option_2.__value = get(index2)) ?? "";
      }
      option_2.disabled = get(option).disabled;
      set_text(text_1, get(option).label);
    });
    append($$anchor2, option_2);
  });
  reset(select);
  validate_binding("bind:value={mapped.value}", () => get(mapped), () => "value", 29, 1);
  bind_select_value(select, () => get(mapped).value, ($$value) => get(mapped).value = $$value);
  append($$anchor, select);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var select_default = Select;

// node_modules/@sjsf/daisyui5-theme/dist/widgets/checkbox.svelte
Checkbox[FILENAME] = "node_modules/@sjsf/daisyui5-theme/dist/widgets/checkbox.svelte";
var root11 = add_locations(from_html(`<label class="fieldset-label"><input/> </label>`), Checkbox[FILENAME], [[15, 0, [[16, 1]]]]);
function Checkbox($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Checkbox);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  var label = root11();
  var input = child(label);
  remove_input_defaults(input);
  attribute_effect(
    input,
    ($0) => ({
      type: "checkbox",
      class: [
        "checkbox",
        $$props.errors.length > 0 && "checkbox-error"
      ],
      ...$0
    }),
    [
      () => inputAttributes(ctx, $$props.config, "checkbox", $$props.handlers, {})
    ]
  );
  var text2 = sibling(input);
  reset(label);
  template_effect(() => set_text(text2, ` ${$$props.config.title ?? ""}`));
  bind_checked(input, () => value() ?? false, (v) => value(v));
  append($$anchor, label);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Checkbox = hmr(Checkbox, () => Checkbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Checkbox[HMR].source;
    set(Checkbox[HMR].source, module.default[HMR].original);
  });
}
var checkbox_default = Checkbox;

// node_modules/@sjsf/daisyui5-theme/dist/definitions.js
var definitions2 = {
  ...exports_exports,
  ...exports_exports2,
  ...exports_exports3
};

// node_modules/@sjsf/daisyui5-theme/dist/index.js
var theme = extendByRecord(fields, definitions2);
export {
  theme
};
//# sourceMappingURL=@sjsf_daisyui5-theme.js.map
