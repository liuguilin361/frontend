import "./chunk-EGRHWZRV.js";
import {
  definitions
} from "./chunk-AKJG6NNY.js";
import {
  abortPrevious,
  addFile,
  createAction,
  fileToDataURL,
  getComponent,
  getErrors,
  getFormContext,
  makeEventHandlers,
  validateField
} from "./chunk-TH67H3ZF.js";
import "./chunk-4CFPDER2.js";
import "./chunk-L5BEN6GZ.js";
import "./chunk-3I4LE53J.js";
import "./chunk-QKPL34R6.js";
import "./chunk-NMJMEXLF.js";
import "./chunk-7RQDXF5S.js";
import {
  check_target,
  component,
  hmr,
  legacy_api,
  prop,
  validate_binding,
  wrap_snippet
} from "./chunk-C3TCUAZZ.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment
} from "./chunk-4O4LVGQI.js";
import {
  FILENAME,
  HMR,
  first_child,
  get,
  pop,
  push,
  set,
  state,
  strict_equals,
  tag,
  user_derived,
  user_effect
} from "./chunk-YEGJDBKW.js";
import "./chunk-NXGWPDOQ.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-TXI4FRAY.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-G3PMV62Z.js";

// node_modules/@sjsf/form/dist/lib/svelte.svelte.js
function createAsyncBinding({
  initialOutput,
  getInput,
  setInput,
  toInput,
  toOutput,
  isEqual = Object.is
}) {
  let lastInputUpdate;
  const toInputAction = createAction({
    combinator: abortPrevious,
    execute: toInput,
    onSuccess(result) {
      lastInputUpdate = result;
      setInput(result);
    }
  });
  let output = tag(state(initialOutput), "output");
  const toOutputAction = createAction({
    combinator: abortPrevious,
    execute: toOutput,
    onSuccess(result) {
      set(output, result);
    }
  });
  user_effect(() => {
    const input = getInput();
    if (isEqual(input, lastInputUpdate)) {
      return;
    }
    toInputAction.abort();
    toOutputAction.run(input);
  });
  return {
    get current() {
      return get(output);
    },
    set current(v) {
      toOutputAction.abort();
      toInputAction.run(v);
    },
    get inputProcessing() {
      return toInputAction.isProcessed;
    },
    get outputProcessing() {
      return toOutputAction.isProcessed;
    }
  };
}

// node_modules/@sjsf/form/dist/fields/extra-fields/file.svelte
File[FILENAME] = "node_modules/@sjsf/form/dist/fields/extra-fields/file.svelte";
function File($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, File);
  let value = prop($$props, "value", 15);
  const ctx = getFormContext();
  const Template = tag(user_derived(() => getComponent(ctx, "fieldTemplate", $$props.config)), "Template");
  const widgetType = "fileWidget";
  const Widget = tag(user_derived(() => getComponent(ctx, widgetType, $$props.config)), "Widget");
  const handlers = makeEventHandlers(ctx, () => validateField(ctx, $$props.config, value()));
  const files = createAsyncBinding({
    initialOutput: void 0,
    getInput: () => value(),
    setInput: (v) => value(v),
    async toOutput(signal, value2) {
      const data = new DataTransfer();
      if (strict_equals(value2, void 0, false)) {
        await addFile(ctx, signal, data, value2);
      }
      return data.files;
    },
    async toInput(signal, files2) {
      return strict_equals(files2, void 0) || strict_equals(files2.length, 0) ? void 0 : fileToDataURL(signal, files2[0]);
    }
  });
  const errors = tag(user_derived(() => getErrors(ctx, $$props.config.id)), "errors");
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(Template), ($$anchor2, Template_1) => {
    Template_1($$anchor2, {
      type: "template",
      showTitle: true,
      useLabel: true,
      get uiOption() {
        return $$props.uiOption;
      },
      widgetType,
      get value() {
        return value();
      },
      get config() {
        return $$props.config;
      },
      get errors() {
        return get(errors);
      },
      children: wrap_snippet(File, ($$anchor3, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        validate_binding("bind:value={files.current}", () => files, () => "current", 74, 4);
        component(node_1, () => get(Widget), ($$anchor4, Widget_1) => {
          Widget_1($$anchor4, {
            type: "widget",
            get processing() {
              return files.inputProcessing;
            },
            get loading() {
              return files.outputProcessing;
            },
            get uiOption() {
              return $$props.uiOption;
            },
            get handlers() {
              return handlers;
            },
            get errors() {
              return get(errors);
            },
            get config() {
              return $$props.config;
            },
            multiple: false,
            get value() {
              return files.current;
            },
            set value($$value) {
              files.current = $$value;
            }
          });
        });
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File = hmr(File, () => File[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File[HMR].source;
    set(File[HMR].source, module.default[HMR].original);
  });
}
var file_default = File;

// node_modules/@sjsf/form/dist/fields/extra-fields/file-include.js
definitions.fileField = file_default;
//# sourceMappingURL=@sjsf_form_fields_extra-fields_file-include.js.map
